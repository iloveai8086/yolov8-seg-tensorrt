// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx-ml.proto

#include "onnx-ml.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace onnx {
PROTOBUF_CONSTEXPR AttributeProto::AttributeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.floats_)*/{}
  , /*decltype(_impl_.ints_)*/{}
  , /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_.tensors_)*/{}
  , /*decltype(_impl_.graphs_)*/{}
  , /*decltype(_impl_.type_protos_)*/{}
  , /*decltype(_impl_.sparse_tensors_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ref_attr_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.t_)*/nullptr
  , /*decltype(_impl_.g_)*/nullptr
  , /*decltype(_impl_.tp_)*/nullptr
  , /*decltype(_impl_.sparse_tensor_)*/nullptr
  , /*decltype(_impl_.i_)*/int64_t{0}
  , /*decltype(_impl_.f_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct AttributeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeProtoDefaultTypeInternal() {}
  union {
    AttributeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
PROTOBUF_CONSTEXPR ValueInfoProto::ValueInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr} {}
struct ValueInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueInfoProtoDefaultTypeInternal() {}
  union {
    ValueInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueInfoProtoDefaultTypeInternal _ValueInfoProto_default_instance_;
PROTOBUF_CONSTEXPR NodeProto::NodeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_)*/{}
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_.attribute_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NodeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeProtoDefaultTypeInternal() {}
  union {
    NodeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeProtoDefaultTypeInternal _NodeProto_default_instance_;
PROTOBUF_CONSTEXPR TrainingInfoProto::TrainingInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initialization_binding_)*/{}
  , /*decltype(_impl_.update_binding_)*/{}
  , /*decltype(_impl_.initialization_)*/nullptr
  , /*decltype(_impl_.algorithm_)*/nullptr} {}
struct TrainingInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingInfoProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingInfoProtoDefaultTypeInternal() {}
  union {
    TrainingInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingInfoProtoDefaultTypeInternal _TrainingInfoProto_default_instance_;
PROTOBUF_CONSTEXPR ModelProto::ModelProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.opset_import_)*/{}
  , /*decltype(_impl_.metadata_props_)*/{}
  , /*decltype(_impl_.training_info_)*/{}
  , /*decltype(_impl_.functions_)*/{}
  , /*decltype(_impl_.producer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.producer_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_)*/nullptr
  , /*decltype(_impl_.ir_version_)*/int64_t{0}
  , /*decltype(_impl_.model_version_)*/int64_t{0}} {}
struct ModelProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelProtoDefaultTypeInternal() {}
  union {
    ModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
PROTOBUF_CONSTEXPR StringStringEntryProto::StringStringEntryProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StringStringEntryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringStringEntryProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringStringEntryProtoDefaultTypeInternal() {}
  union {
    StringStringEntryProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringStringEntryProtoDefaultTypeInternal _StringStringEntryProto_default_instance_;
PROTOBUF_CONSTEXPR TensorAnnotation::TensorAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quant_parameter_tensor_names_)*/{}
  , /*decltype(_impl_.tensor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TensorAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorAnnotationDefaultTypeInternal() {}
  union {
    TensorAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorAnnotationDefaultTypeInternal _TensorAnnotation_default_instance_;
PROTOBUF_CONSTEXPR GraphProto::GraphProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.initializer_)*/{}
  , /*decltype(_impl_.input_)*/{}
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_.value_info_)*/{}
  , /*decltype(_impl_.quantization_annotation_)*/{}
  , /*decltype(_impl_.sparse_initializer_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GraphProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphProtoDefaultTypeInternal() {}
  union {
    GraphProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
PROTOBUF_CONSTEXPR TensorProto_Segment::TensorProto_Segment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_)*/int64_t{0}
  , /*decltype(_impl_.end_)*/int64_t{0}} {}
struct TensorProto_SegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorProto_SegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorProto_SegmentDefaultTypeInternal() {}
  union {
    TensorProto_Segment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorProto_SegmentDefaultTypeInternal _TensorProto_Segment_default_instance_;
PROTOBUF_CONSTEXPR TensorProto::TensorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dims_)*/{}
  , /*decltype(_impl_.float_data_)*/{}
  , /*decltype(_impl_.int32_data_)*/{}
  , /*decltype(_impl_._int32_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.string_data_)*/{}
  , /*decltype(_impl_.int64_data_)*/{}
  , /*decltype(_impl_._int64_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.double_data_)*/{}
  , /*decltype(_impl_.uint64_data_)*/{}
  , /*decltype(_impl_._uint64_data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.external_data_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.raw_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segment_)*/nullptr
  , /*decltype(_impl_.data_type_)*/0
  , /*decltype(_impl_.data_location_)*/0} {}
struct TensorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorProtoDefaultTypeInternal() {}
  union {
    TensorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
PROTOBUF_CONSTEXPR SparseTensorProto::SparseTensorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dims_)*/{}
  , /*decltype(_impl_.values_)*/nullptr
  , /*decltype(_impl_.indices_)*/nullptr} {}
struct SparseTensorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseTensorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseTensorProtoDefaultTypeInternal() {}
  union {
    SparseTensorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseTensorProtoDefaultTypeInternal _SparseTensorProto_default_instance_;
PROTOBUF_CONSTEXPR TensorShapeProto_Dimension::TensorShapeProto_Dimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denotation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TensorShapeProto_DimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorShapeProto_DimensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorShapeProto_DimensionDefaultTypeInternal() {}
  union {
    TensorShapeProto_Dimension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorShapeProto_DimensionDefaultTypeInternal _TensorShapeProto_Dimension_default_instance_;
PROTOBUF_CONSTEXPR TensorShapeProto::TensorShapeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dim_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorShapeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorShapeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorShapeProtoDefaultTypeInternal() {}
  union {
    TensorShapeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
PROTOBUF_CONSTEXPR TypeProto_Tensor::TypeProto_Tensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.elem_type_)*/0} {}
struct TypeProto_TensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_TensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_TensorDefaultTypeInternal() {}
  union {
    TypeProto_Tensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_TensorDefaultTypeInternal _TypeProto_Tensor_default_instance_;
PROTOBUF_CONSTEXPR TypeProto_Sequence::TypeProto_Sequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.elem_type_)*/nullptr} {}
struct TypeProto_SequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_SequenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_SequenceDefaultTypeInternal() {}
  union {
    TypeProto_Sequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_SequenceDefaultTypeInternal _TypeProto_Sequence_default_instance_;
PROTOBUF_CONSTEXPR TypeProto_Map::TypeProto_Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_type_)*/nullptr
  , /*decltype(_impl_.key_type_)*/0} {}
struct TypeProto_MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_MapDefaultTypeInternal() {}
  union {
    TypeProto_Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_MapDefaultTypeInternal _TypeProto_Map_default_instance_;
PROTOBUF_CONSTEXPR TypeProto_Optional::TypeProto_Optional(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.elem_type_)*/nullptr} {}
struct TypeProto_OptionalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_OptionalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_OptionalDefaultTypeInternal() {}
  union {
    TypeProto_Optional _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_OptionalDefaultTypeInternal _TypeProto_Optional_default_instance_;
PROTOBUF_CONSTEXPR TypeProto_SparseTensor::TypeProto_SparseTensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.elem_type_)*/0} {}
struct TypeProto_SparseTensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_SparseTensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_SparseTensorDefaultTypeInternal() {}
  union {
    TypeProto_SparseTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_SparseTensorDefaultTypeInternal _TypeProto_SparseTensor_default_instance_;
PROTOBUF_CONSTEXPR TypeProto_Opaque::TypeProto_Opaque(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TypeProto_OpaqueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_OpaqueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_OpaqueDefaultTypeInternal() {}
  union {
    TypeProto_Opaque _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_OpaqueDefaultTypeInternal _TypeProto_Opaque_default_instance_;
PROTOBUF_CONSTEXPR TypeProto::TypeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denotation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProtoDefaultTypeInternal() {}
  union {
    TypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
PROTOBUF_CONSTEXPR OperatorSetIdProto::OperatorSetIdProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/int64_t{0}} {}
struct OperatorSetIdProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorSetIdProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorSetIdProtoDefaultTypeInternal() {}
  union {
    OperatorSetIdProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorSetIdProtoDefaultTypeInternal _OperatorSetIdProto_default_instance_;
PROTOBUF_CONSTEXPR FunctionProto::FunctionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_)*/{}
  , /*decltype(_impl_.output_)*/{}
  , /*decltype(_impl_.attribute_)*/{}
  , /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.opset_import_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct FunctionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionProtoDefaultTypeInternal() {}
  union {
    FunctionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionProtoDefaultTypeInternal _FunctionProto_default_instance_;
}  // namespace onnx
static ::_pb::Metadata file_level_metadata_onnx_2dml_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_onnx_2dml_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_onnx_2dml_2eproto = nullptr;

const uint32_t TableStruct_onnx_2dml_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.ref_attr_name_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.doc_string_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.f_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.i_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.sparse_tensor_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.tp_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.floats_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.ints_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.strings_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.tensors_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.graphs_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.sparse_tensors_),
  PROTOBUF_FIELD_OFFSET(::onnx::AttributeProto, _impl_.type_protos_),
  0,
  3,
  2,
  10,
  9,
  8,
  1,
  4,
  5,
  7,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::ValueInfoProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::ValueInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::ValueInfoProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::onnx::ValueInfoProto, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::onnx::ValueInfoProto, _impl_.doc_string_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::onnx::NodeProto, _impl_.doc_string_),
  ~0u,
  ~0u,
  0,
  1,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::onnx::TrainingInfoProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TrainingInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TrainingInfoProto, _impl_.initialization_),
  PROTOBUF_FIELD_OFFSET(::onnx::TrainingInfoProto, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::onnx::TrainingInfoProto, _impl_.initialization_binding_),
  PROTOBUF_FIELD_OFFSET(::onnx::TrainingInfoProto, _impl_.update_binding_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.ir_version_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.opset_import_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.producer_name_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.producer_version_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.model_version_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.doc_string_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.graph_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.metadata_props_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.training_info_),
  PROTOBUF_FIELD_OFFSET(::onnx::ModelProto, _impl_.functions_),
  5,
  ~0u,
  0,
  1,
  2,
  6,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::StringStringEntryProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::StringStringEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::StringStringEntryProto, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::onnx::StringStringEntryProto, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::TensorAnnotation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TensorAnnotation, _impl_.tensor_name_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorAnnotation, _impl_.quant_parameter_tensor_names_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.initializer_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.sparse_initializer_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.doc_string_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.value_info_),
  PROTOBUF_FIELD_OFFSET(::onnx::GraphProto, _impl_.quantization_annotation_),
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto_Segment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto_Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto_Segment, _impl_.begin_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto_Segment, _impl_.end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.dims_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.data_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.segment_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.float_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.int32_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.string_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.int64_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.doc_string_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.raw_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.external_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.data_location_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.double_data_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorProto, _impl_.uint64_data_),
  ~0u,
  4,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  2,
  1,
  ~0u,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::SparseTensorProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::SparseTensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::SparseTensorProto, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::onnx::SparseTensorProto, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::onnx::SparseTensorProto, _impl_.dims_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _impl_.denotation_),
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _impl_.value_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto, _impl_.dim_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Tensor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Tensor, _impl_.elem_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Tensor, _impl_.shape_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Sequence, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Sequence, _impl_.elem_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Map, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Map, _impl_.key_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Map, _impl_.value_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Optional, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Optional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Optional, _impl_.elem_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_SparseTensor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_SparseTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_SparseTensor, _impl_.elem_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_SparseTensor, _impl_.shape_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Opaque, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Opaque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Opaque, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto_Opaque, _impl_.name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _impl_.denotation_),
  PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _impl_.value_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetIdProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetIdProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetIdProto, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetIdProto, _impl_.version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.doc_string_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.opset_import_),
  PROTOBUF_FIELD_OFFSET(::onnx::FunctionProto, _impl_.domain_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, -1, sizeof(::onnx::AttributeProto)},
  { 44, 55, -1, sizeof(::onnx::ValueInfoProto)},
  { 58, 73, -1, sizeof(::onnx::NodeProto)},
  { 80, 92, -1, sizeof(::onnx::TrainingInfoProto)},
  { 96, 115, -1, sizeof(::onnx::ModelProto)},
  { 126, 136, -1, sizeof(::onnx::StringStringEntryProto)},
  { 138, 148, -1, sizeof(::onnx::TensorAnnotation)},
  { 150, 167, -1, sizeof(::onnx::GraphProto)},
  { 176, 186, -1, sizeof(::onnx::TensorProto_Segment)},
  { 188, 210, -1, sizeof(::onnx::TensorProto)},
  { 224, 235, -1, sizeof(::onnx::SparseTensorProto)},
  { 238, 250, -1, sizeof(::onnx::TensorShapeProto_Dimension)},
  { 253, -1, -1, sizeof(::onnx::TensorShapeProto)},
  { 262, 272, -1, sizeof(::onnx::TypeProto_Tensor)},
  { 274, 283, -1, sizeof(::onnx::TypeProto_Sequence)},
  { 284, 294, -1, sizeof(::onnx::TypeProto_Map)},
  { 296, 305, -1, sizeof(::onnx::TypeProto_Optional)},
  { 306, 316, -1, sizeof(::onnx::TypeProto_SparseTensor)},
  { 318, 328, -1, sizeof(::onnx::TypeProto_Opaque)},
  { 330, 346, -1, sizeof(::onnx::TypeProto)},
  { 353, 363, -1, sizeof(::onnx::OperatorSetIdProto)},
  { 365, 381, -1, sizeof(::onnx::FunctionProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::onnx::_AttributeProto_default_instance_._instance,
  &::onnx::_ValueInfoProto_default_instance_._instance,
  &::onnx::_NodeProto_default_instance_._instance,
  &::onnx::_TrainingInfoProto_default_instance_._instance,
  &::onnx::_ModelProto_default_instance_._instance,
  &::onnx::_StringStringEntryProto_default_instance_._instance,
  &::onnx::_TensorAnnotation_default_instance_._instance,
  &::onnx::_GraphProto_default_instance_._instance,
  &::onnx::_TensorProto_Segment_default_instance_._instance,
  &::onnx::_TensorProto_default_instance_._instance,
  &::onnx::_SparseTensorProto_default_instance_._instance,
  &::onnx::_TensorShapeProto_Dimension_default_instance_._instance,
  &::onnx::_TensorShapeProto_default_instance_._instance,
  &::onnx::_TypeProto_Tensor_default_instance_._instance,
  &::onnx::_TypeProto_Sequence_default_instance_._instance,
  &::onnx::_TypeProto_Map_default_instance_._instance,
  &::onnx::_TypeProto_Optional_default_instance_._instance,
  &::onnx::_TypeProto_SparseTensor_default_instance_._instance,
  &::onnx::_TypeProto_Opaque_default_instance_._instance,
  &::onnx::_TypeProto_default_instance_._instance,
  &::onnx::_OperatorSetIdProto_default_instance_._instance,
  &::onnx::_FunctionProto_default_instance_._instance,
};

const char descriptor_table_protodef_onnx_2dml_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ronnx-ml.proto\022\004onnx\"\314\005\n\016AttributeProto"
  "\022\014\n\004name\030\001 \001(\t\022\025\n\rref_attr_name\030\025 \001(\t\022\022\n"
  "\ndoc_string\030\r \001(\t\0220\n\004type\030\024 \001(\0162\".onnx.A"
  "ttributeProto.AttributeType\022\t\n\001f\030\002 \001(\002\022\t"
  "\n\001i\030\003 \001(\003\022\t\n\001s\030\004 \001(\014\022\034\n\001t\030\005 \001(\0132\021.onnx.T"
  "ensorProto\022\033\n\001g\030\006 \001(\0132\020.onnx.GraphProto\022"
  ".\n\rsparse_tensor\030\026 \001(\0132\027.onnx.SparseTens"
  "orProto\022\033\n\002tp\030\016 \001(\0132\017.onnx.TypeProto\022\016\n\006"
  "floats\030\007 \003(\002\022\014\n\004ints\030\010 \003(\003\022\017\n\007strings\030\t "
  "\003(\014\022\"\n\007tensors\030\n \003(\0132\021.onnx.TensorProto\022"
  " \n\006graphs\030\013 \003(\0132\020.onnx.GraphProto\022/\n\016spa"
  "rse_tensors\030\027 \003(\0132\027.onnx.SparseTensorPro"
  "to\022$\n\013type_protos\030\017 \003(\0132\017.onnx.TypeProto"
  "\"\331\001\n\rAttributeType\022\r\n\tUNDEFINED\020\000\022\t\n\005FLO"
  "AT\020\001\022\007\n\003INT\020\002\022\n\n\006STRING\020\003\022\n\n\006TENSOR\020\004\022\t\n"
  "\005GRAPH\020\005\022\021\n\rSPARSE_TENSOR\020\013\022\016\n\nTYPE_PROT"
  "O\020\r\022\n\n\006FLOATS\020\006\022\010\n\004INTS\020\007\022\013\n\007STRINGS\020\010\022\013"
  "\n\007TENSORS\020\t\022\n\n\006GRAPHS\020\n\022\022\n\016SPARSE_TENSOR"
  "S\020\014\022\017\n\013TYPE_PROTOS\020\016\"Q\n\016ValueInfoProto\022\014"
  "\n\004name\030\001 \001(\t\022\035\n\004type\030\002 \001(\0132\017.onnx.TypePr"
  "oto\022\022\n\ndoc_string\030\003 \001(\t\"\226\001\n\tNodeProto\022\r\n"
  "\005input\030\001 \003(\t\022\016\n\006output\030\002 \003(\t\022\014\n\004name\030\003 \001"
  "(\t\022\017\n\007op_type\030\004 \001(\t\022\016\n\006domain\030\007 \001(\t\022\'\n\ta"
  "ttribute\030\005 \003(\0132\024.onnx.AttributeProto\022\022\n\n"
  "doc_string\030\006 \001(\t\"\326\001\n\021TrainingInfoProto\022("
  "\n\016initialization\030\001 \001(\0132\020.onnx.GraphProto"
  "\022#\n\talgorithm\030\002 \001(\0132\020.onnx.GraphProto\022<\n"
  "\026initialization_binding\030\003 \003(\0132\034.onnx.Str"
  "ingStringEntryProto\0224\n\016update_binding\030\004 "
  "\003(\0132\034.onnx.StringStringEntryProto\"\353\002\n\nMo"
  "delProto\022\022\n\nir_version\030\001 \001(\003\022.\n\014opset_im"
  "port\030\010 \003(\0132\030.onnx.OperatorSetIdProto\022\025\n\r"
  "producer_name\030\002 \001(\t\022\030\n\020producer_version\030"
  "\003 \001(\t\022\016\n\006domain\030\004 \001(\t\022\025\n\rmodel_version\030\005"
  " \001(\003\022\022\n\ndoc_string\030\006 \001(\t\022\037\n\005graph\030\007 \001(\0132"
  "\020.onnx.GraphProto\0224\n\016metadata_props\030\016 \003("
  "\0132\034.onnx.StringStringEntryProto\022.\n\rtrain"
  "ing_info\030\024 \003(\0132\027.onnx.TrainingInfoProto\022"
  "&\n\tfunctions\030\031 \003(\0132\023.onnx.FunctionProto\""
  "4\n\026StringStringEntryProto\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t\"k\n\020TensorAnnotation\022\023\n\013ten"
  "sor_name\030\001 \001(\t\022B\n\034quant_parameter_tensor"
  "_names\030\002 \003(\0132\034.onnx.StringStringEntryPro"
  "to\"\330\002\n\nGraphProto\022\035\n\004node\030\001 \003(\0132\017.onnx.N"
  "odeProto\022\014\n\004name\030\002 \001(\t\022&\n\013initializer\030\005 "
  "\003(\0132\021.onnx.TensorProto\0223\n\022sparse_initial"
  "izer\030\017 \003(\0132\027.onnx.SparseTensorProto\022\022\n\nd"
  "oc_string\030\n \001(\t\022#\n\005input\030\013 \003(\0132\024.onnx.Va"
  "lueInfoProto\022$\n\006output\030\014 \003(\0132\024.onnx.Valu"
  "eInfoProto\022(\n\nvalue_info\030\r \003(\0132\024.onnx.Va"
  "lueInfoProto\0227\n\027quantization_annotation\030"
  "\016 \003(\0132\026.onnx.TensorAnnotation\"\270\005\n\013Tensor"
  "Proto\022\014\n\004dims\030\001 \003(\003\022\021\n\tdata_type\030\002 \001(\005\022*"
  "\n\007segment\030\003 \001(\0132\031.onnx.TensorProto.Segme"
  "nt\022\026\n\nfloat_data\030\004 \003(\002B\002\020\001\022\026\n\nint32_data"
  "\030\005 \003(\005B\002\020\001\022\023\n\013string_data\030\006 \003(\014\022\026\n\nint64"
  "_data\030\007 \003(\003B\002\020\001\022\014\n\004name\030\010 \001(\t\022\022\n\ndoc_str"
  "ing\030\014 \001(\t\022\020\n\010raw_data\030\t \001(\014\0223\n\rexternal_"
  "data\030\r \003(\0132\034.onnx.StringStringEntryProto"
  "\0225\n\rdata_location\030\016 \001(\0162\036.onnx.TensorPro"
  "to.DataLocation\022\027\n\013double_data\030\n \003(\001B\002\020\001"
  "\022\027\n\013uint64_data\030\013 \003(\004B\002\020\001\032%\n\007Segment\022\r\n\005"
  "begin\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"\332\001\n\010DataType\022\r\n"
  "\tUNDEFINED\020\000\022\t\n\005FLOAT\020\001\022\t\n\005UINT8\020\002\022\010\n\004IN"
  "T8\020\003\022\n\n\006UINT16\020\004\022\t\n\005INT16\020\005\022\t\n\005INT32\020\006\022\t"
  "\n\005INT64\020\007\022\n\n\006STRING\020\010\022\010\n\004BOOL\020\t\022\013\n\007FLOAT"
  "16\020\n\022\n\n\006DOUBLE\020\013\022\n\n\006UINT32\020\014\022\n\n\006UINT64\020\r"
  "\022\r\n\tCOMPLEX64\020\016\022\016\n\nCOMPLEX128\020\017\022\014\n\010BFLOA"
  "T16\020\020\")\n\014DataLocation\022\013\n\007DEFAULT\020\000\022\014\n\010EX"
  "TERNAL\020\001\"h\n\021SparseTensorProto\022!\n\006values\030"
  "\001 \001(\0132\021.onnx.TensorProto\022\"\n\007indices\030\002 \001("
  "\0132\021.onnx.TensorProto\022\014\n\004dims\030\003 \003(\003\"\225\001\n\020T"
  "ensorShapeProto\022-\n\003dim\030\001 \003(\0132 .onnx.Tens"
  "orShapeProto.Dimension\032R\n\tDimension\022\023\n\td"
  "im_value\030\001 \001(\003H\000\022\023\n\tdim_param\030\002 \001(\tH\000\022\022\n"
  "\ndenotation\030\003 \001(\tB\007\n\005value\"\245\005\n\tTypeProto"
  "\022-\n\013tensor_type\030\001 \001(\0132\026.onnx.TypeProto.T"
  "ensorH\000\0221\n\rsequence_type\030\004 \001(\0132\030.onnx.Ty"
  "peProto.SequenceH\000\022\'\n\010map_type\030\005 \001(\0132\023.o"
  "nnx.TypeProto.MapH\000\0221\n\roptional_type\030\t \001"
  "(\0132\030.onnx.TypeProto.OptionalH\000\022:\n\022sparse"
  "_tensor_type\030\010 \001(\0132\034.onnx.TypeProto.Spar"
  "seTensorH\000\022-\n\013opaque_type\030\007 \001(\0132\026.onnx.T"
  "ypeProto.OpaqueH\000\022\022\n\ndenotation\030\006 \001(\t\032B\n"
  "\006Tensor\022\021\n\telem_type\030\001 \001(\005\022%\n\005shape\030\002 \001("
  "\0132\026.onnx.TensorShapeProto\032.\n\010Sequence\022\"\n"
  "\telem_type\030\001 \001(\0132\017.onnx.TypeProto\032<\n\003Map"
  "\022\020\n\010key_type\030\001 \001(\005\022#\n\nvalue_type\030\002 \001(\0132\017"
  ".onnx.TypeProto\032.\n\010Optional\022\"\n\telem_type"
  "\030\001 \001(\0132\017.onnx.TypeProto\032H\n\014SparseTensor\022"
  "\021\n\telem_type\030\001 \001(\005\022%\n\005shape\030\002 \001(\0132\026.onnx"
  ".TensorShapeProto\032&\n\006Opaque\022\016\n\006domain\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\tB\007\n\005value\"5\n\022OperatorSe"
  "tIdProto\022\016\n\006domain\030\001 \001(\t\022\017\n\007version\030\002 \001("
  "\003\"\345\001\n\rFunctionProto\022\014\n\004name\030\001 \001(\t\022\r\n\005inp"
  "ut\030\004 \003(\t\022\016\n\006output\030\005 \003(\t\022\021\n\tattribute\030\006 "
  "\003(\t\022\035\n\004node\030\007 \003(\0132\017.onnx.NodeProto\022\022\n\ndo"
  "c_string\030\010 \001(\t\022.\n\014opset_import\030\t \003(\0132\030.o"
  "nnx.OperatorSetIdProto\022\016\n\006domain\030\n \001(\tJ\004"
  "\010\002\020\003J\004\010\003\020\004R\rsince_versionR\006status*\344\001\n\007Ve"
  "rsion\022\022\n\016_START_VERSION\020\000\022\031\n\025IR_VERSION_"
  "2017_10_10\020\001\022\031\n\025IR_VERSION_2017_10_30\020\002\022"
  "\030\n\024IR_VERSION_2017_11_3\020\003\022\030\n\024IR_VERSION_"
  "2019_1_22\020\004\022\030\n\024IR_VERSION_2019_3_18\020\005\022\030\n"
  "\024IR_VERSION_2019_9_19\020\006\022\027\n\023IR_VERSION_20"
  "20_5_8\020\007\022\016\n\nIR_VERSION\020\010*.\n\016OperatorStat"
  "us\022\020\n\014EXPERIMENTAL\020\000\022\n\n\006STABLE\020\001"
  ;
static ::_pbi::once_flag descriptor_table_onnx_2dml_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_onnx_2dml_2eproto = {
    false, false, 4272, descriptor_table_protodef_onnx_2dml_2eproto,
    "onnx-ml.proto",
    &descriptor_table_onnx_2dml_2eproto_once, nullptr, 0, 22,
    schemas, file_default_instances, TableStruct_onnx_2dml_2eproto::offsets,
    file_level_metadata_onnx_2dml_2eproto, file_level_enum_descriptors_onnx_2dml_2eproto,
    file_level_service_descriptors_onnx_2dml_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_onnx_2dml_2eproto_getter() {
  return &descriptor_table_onnx_2dml_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_onnx_2dml_2eproto(&descriptor_table_onnx_2dml_2eproto);
namespace onnx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeProto_AttributeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2dml_2eproto);
  return file_level_enum_descriptors_onnx_2dml_2eproto[0];
}
bool AttributeProto_AttributeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AttributeProto_AttributeType AttributeProto::UNDEFINED;
constexpr AttributeProto_AttributeType AttributeProto::FLOAT;
constexpr AttributeProto_AttributeType AttributeProto::INT;
constexpr AttributeProto_AttributeType AttributeProto::STRING;
constexpr AttributeProto_AttributeType AttributeProto::TENSOR;
constexpr AttributeProto_AttributeType AttributeProto::GRAPH;
constexpr AttributeProto_AttributeType AttributeProto::SPARSE_TENSOR;
constexpr AttributeProto_AttributeType AttributeProto::TYPE_PROTO;
constexpr AttributeProto_AttributeType AttributeProto::FLOATS;
constexpr AttributeProto_AttributeType AttributeProto::INTS;
constexpr AttributeProto_AttributeType AttributeProto::STRINGS;
constexpr AttributeProto_AttributeType AttributeProto::TENSORS;
constexpr AttributeProto_AttributeType AttributeProto::GRAPHS;
constexpr AttributeProto_AttributeType AttributeProto::SPARSE_TENSORS;
constexpr AttributeProto_AttributeType AttributeProto::TYPE_PROTOS;
constexpr AttributeProto_AttributeType AttributeProto::AttributeType_MIN;
constexpr AttributeProto_AttributeType AttributeProto::AttributeType_MAX;
constexpr int AttributeProto::AttributeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorProto_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2dml_2eproto);
  return file_level_enum_descriptors_onnx_2dml_2eproto[1];
}
bool TensorProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TensorProto_DataType TensorProto::UNDEFINED;
constexpr TensorProto_DataType TensorProto::FLOAT;
constexpr TensorProto_DataType TensorProto::UINT8;
constexpr TensorProto_DataType TensorProto::INT8;
constexpr TensorProto_DataType TensorProto::UINT16;
constexpr TensorProto_DataType TensorProto::INT16;
constexpr TensorProto_DataType TensorProto::INT32;
constexpr TensorProto_DataType TensorProto::INT64;
constexpr TensorProto_DataType TensorProto::STRING;
constexpr TensorProto_DataType TensorProto::BOOL;
constexpr TensorProto_DataType TensorProto::FLOAT16;
constexpr TensorProto_DataType TensorProto::DOUBLE;
constexpr TensorProto_DataType TensorProto::UINT32;
constexpr TensorProto_DataType TensorProto::UINT64;
constexpr TensorProto_DataType TensorProto::COMPLEX64;
constexpr TensorProto_DataType TensorProto::COMPLEX128;
constexpr TensorProto_DataType TensorProto::BFLOAT16;
constexpr TensorProto_DataType TensorProto::DataType_MIN;
constexpr TensorProto_DataType TensorProto::DataType_MAX;
constexpr int TensorProto::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorProto_DataLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2dml_2eproto);
  return file_level_enum_descriptors_onnx_2dml_2eproto[2];
}
bool TensorProto_DataLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TensorProto_DataLocation TensorProto::DEFAULT;
constexpr TensorProto_DataLocation TensorProto::EXTERNAL;
constexpr TensorProto_DataLocation TensorProto::DataLocation_MIN;
constexpr TensorProto_DataLocation TensorProto::DataLocation_MAX;
constexpr int TensorProto::DataLocation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2dml_2eproto);
  return file_level_enum_descriptors_onnx_2dml_2eproto[3];
}
bool Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatorStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2dml_2eproto);
  return file_level_enum_descriptors_onnx_2dml_2eproto[4];
}
bool OperatorStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AttributeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_attr_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::TensorProto& t(const AttributeProto* msg);
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::onnx::GraphProto& g(const AttributeProto* msg);
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::onnx::SparseTensorProto& sparse_tensor(const AttributeProto* msg);
  static void set_has_sparse_tensor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::onnx::TypeProto& tp(const AttributeProto* msg);
  static void set_has_tp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::onnx::TensorProto&
AttributeProto::_Internal::t(const AttributeProto* msg) {
  return *msg->_impl_.t_;
}
const ::onnx::GraphProto&
AttributeProto::_Internal::g(const AttributeProto* msg) {
  return *msg->_impl_.g_;
}
const ::onnx::SparseTensorProto&
AttributeProto::_Internal::sparse_tensor(const AttributeProto* msg) {
  return *msg->_impl_.sparse_tensor_;
}
const ::onnx::TypeProto&
AttributeProto::_Internal::tp(const AttributeProto* msg) {
  return *msg->_impl_.tp_;
}
AttributeProto::AttributeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.AttributeProto)
}
AttributeProto::AttributeProto(const AttributeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.floats_){from._impl_.floats_}
    , decltype(_impl_.ints_){from._impl_.ints_}
    , decltype(_impl_.strings_){from._impl_.strings_}
    , decltype(_impl_.tensors_){from._impl_.tensors_}
    , decltype(_impl_.graphs_){from._impl_.graphs_}
    , decltype(_impl_.type_protos_){from._impl_.type_protos_}
    , decltype(_impl_.sparse_tensors_){from._impl_.sparse_tensors_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.s_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.ref_attr_name_){}
    , decltype(_impl_.t_){nullptr}
    , decltype(_impl_.g_){nullptr}
    , decltype(_impl_.tp_){nullptr}
    , decltype(_impl_.sparse_tensor_){nullptr}
    , decltype(_impl_.i_){}
    , decltype(_impl_.f_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s()) {
    _this->_impl_.s_.Set(from._internal_s(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ref_attr_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ref_attr_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ref_attr_name()) {
    _this->_impl_.ref_attr_name_.Set(from._internal_ref_attr_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_t()) {
    _this->_impl_.t_ = new ::onnx::TensorProto(*from._impl_.t_);
  }
  if (from._internal_has_g()) {
    _this->_impl_.g_ = new ::onnx::GraphProto(*from._impl_.g_);
  }
  if (from._internal_has_tp()) {
    _this->_impl_.tp_ = new ::onnx::TypeProto(*from._impl_.tp_);
  }
  if (from._internal_has_sparse_tensor()) {
    _this->_impl_.sparse_tensor_ = new ::onnx::SparseTensorProto(*from._impl_.sparse_tensor_);
  }
  ::memcpy(&_impl_.i_, &from._impl_.i_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.i_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:onnx.AttributeProto)
}

inline void AttributeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.floats_){arena}
    , decltype(_impl_.ints_){arena}
    , decltype(_impl_.strings_){arena}
    , decltype(_impl_.tensors_){arena}
    , decltype(_impl_.graphs_){arena}
    , decltype(_impl_.type_protos_){arena}
    , decltype(_impl_.sparse_tensors_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.s_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.ref_attr_name_){}
    , decltype(_impl_.t_){nullptr}
    , decltype(_impl_.g_){nullptr}
    , decltype(_impl_.tp_){nullptr}
    , decltype(_impl_.sparse_tensor_){nullptr}
    , decltype(_impl_.i_){int64_t{0}}
    , decltype(_impl_.f_){0}
    , decltype(_impl_.type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ref_attr_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ref_attr_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttributeProto::~AttributeProto() {
  // @@protoc_insertion_point(destructor:onnx.AttributeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.floats_.~RepeatedField();
  _impl_.ints_.~RepeatedField();
  _impl_.strings_.~RepeatedPtrField();
  _impl_.tensors_.~RepeatedPtrField();
  _impl_.graphs_.~RepeatedPtrField();
  _impl_.type_protos_.~RepeatedPtrField();
  _impl_.sparse_tensors_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.s_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.ref_attr_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.t_;
  if (this != internal_default_instance()) delete _impl_.g_;
  if (this != internal_default_instance()) delete _impl_.tp_;
  if (this != internal_default_instance()) delete _impl_.sparse_tensor_;
}

void AttributeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.AttributeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.floats_.Clear();
  _impl_.ints_.Clear();
  _impl_.strings_.Clear();
  _impl_.tensors_.Clear();
  _impl_.graphs_.Clear();
  _impl_.type_protos_.Clear();
  _impl_.sparse_tensors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.s_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ref_attr_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.t_ != nullptr);
      _impl_.t_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.g_ != nullptr);
      _impl_.g_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tp_ != nullptr);
      _impl_.tp_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.sparse_tensor_ != nullptr);
      _impl_.sparse_tensor_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.i_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.i_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.AttributeProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float f = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_f(&has_bits);
          _impl_.f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_i(&has_bits);
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorProto t = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_t(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.GraphProto g = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_g(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float floats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_floats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floats(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 ints = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ints(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes strings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.TensorProto tensors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.GraphProto graphs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.AttributeProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TypeProto tp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.TypeProto type_protos = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.AttributeProto.AttributeType type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::onnx::AttributeProto_AttributeType_IsValid(val))) {
            _internal_set_type(static_cast<::onnx::AttributeProto_AttributeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string ref_attr_name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_ref_attr_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.AttributeProto.ref_attr_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.SparseTensorProto sparse_tensor = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_sparse_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.SparseTensorProto sparse_tensors = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sparse_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.AttributeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.AttributeProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float f = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_f(), target);
  }

  // optional int64 i = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_i(), target);
  }

  // optional bytes s = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_s(), target);
  }

  // optional .onnx.TensorProto t = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::t(this),
        _Internal::t(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.GraphProto g = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::g(this),
        _Internal::g(this).GetCachedSize(), target, stream);
  }

  // repeated float floats = 7;
  for (int i = 0, n = this->_internal_floats_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_floats(i), target);
  }

  // repeated int64 ints = 8;
  for (int i = 0, n = this->_internal_ints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ints(i), target);
  }

  // repeated bytes strings = 9;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    target = stream->WriteBytes(9, s, target);
  }

  // repeated .onnx.TensorProto tensors = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.GraphProto graphs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_graphs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string doc_string = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.AttributeProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_doc_string(), target);
  }

  // optional .onnx.TypeProto tp = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tp(this),
        _Internal::tp(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.TypeProto type_protos = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_protos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .onnx.AttributeProto.AttributeType type = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_type(), target);
  }

  // optional string ref_attr_name = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ref_attr_name().data(), static_cast<int>(this->_internal_ref_attr_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.AttributeProto.ref_attr_name");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ref_attr_name(), target);
  }

  // optional .onnx.SparseTensorProto sparse_tensor = 22;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::sparse_tensor(this),
        _Internal::sparse_tensor(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sparse_tensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_sparse_tensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.AttributeProto)
  return target;
}

size_t AttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.AttributeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floats = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floats_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_floats_size());
    total_size += data_size;
  }

  // repeated int64 ints = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.ints_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ints_size());
    total_size += data_size;
  }

  // repeated bytes strings = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.strings_.size());
  for (int i = 0, n = _impl_.strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.strings_.Get(i));
  }

  // repeated .onnx.TensorProto tensors = 10;
  total_size += 1UL * this->_internal_tensors_size();
  for (const auto& msg : this->_impl_.tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.GraphProto graphs = 11;
  total_size += 1UL * this->_internal_graphs_size();
  for (const auto& msg : this->_impl_.graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.TypeProto type_protos = 15;
  total_size += 1UL * this->_internal_type_protos_size();
  for (const auto& msg : this->_impl_.type_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  total_size += 2UL * this->_internal_sparse_tensors_size();
  for (const auto& msg : this->_impl_.sparse_tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes s = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_s());
    }

    // optional string doc_string = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional string ref_attr_name = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ref_attr_name());
    }

    // optional .onnx.TensorProto t = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_);
    }

    // optional .onnx.GraphProto g = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.g_);
    }

    // optional .onnx.TypeProto tp = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tp_);
    }

    // optional .onnx.SparseTensorProto sparse_tensor = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sparse_tensor_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 i = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_i());
    }

    // optional float f = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .onnx.AttributeProto.AttributeType type = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeProto::GetClassData() const { return &_class_data_; }


void AttributeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeProto*>(&to_msg);
  auto& from = static_cast<const AttributeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.AttributeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.floats_.MergeFrom(from._impl_.floats_);
  _this->_impl_.ints_.MergeFrom(from._impl_.ints_);
  _this->_impl_.strings_.MergeFrom(from._impl_.strings_);
  _this->_impl_.tensors_.MergeFrom(from._impl_.tensors_);
  _this->_impl_.graphs_.MergeFrom(from._impl_.graphs_);
  _this->_impl_.type_protos_.MergeFrom(from._impl_.type_protos_);
  _this->_impl_.sparse_tensors_.MergeFrom(from._impl_.sparse_tensors_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_s(from._internal_s());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ref_attr_name(from._internal_ref_attr_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_t()->::onnx::TensorProto::MergeFrom(
          from._internal_t());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_g()->::onnx::GraphProto::MergeFrom(
          from._internal_g());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tp()->::onnx::TypeProto::MergeFrom(
          from._internal_tp());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_sparse_tensor()->::onnx::SparseTensorProto::MergeFrom(
          from._internal_sparse_tensor());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.i_ = from._impl_.i_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.f_ = from._impl_.f_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeProto::CopyFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.AttributeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeProto::IsInitialized() const {
  return true;
}

void AttributeProto::InternalSwap(AttributeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.floats_.InternalSwap(&other->_impl_.floats_);
  _impl_.ints_.InternalSwap(&other->_impl_.ints_);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
  _impl_.tensors_.InternalSwap(&other->_impl_.tensors_);
  _impl_.graphs_.InternalSwap(&other->_impl_.graphs_);
  _impl_.type_protos_.InternalSwap(&other->_impl_.type_protos_);
  _impl_.sparse_tensors_.InternalSwap(&other->_impl_.sparse_tensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_, lhs_arena,
      &other->_impl_.s_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ref_attr_name_, lhs_arena,
      &other->_impl_.ref_attr_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.type_)
      + sizeof(AttributeProto::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.t_)>(
          reinterpret_cast<char*>(&_impl_.t_),
          reinterpret_cast<char*>(&other->_impl_.t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[0]);
}

// ===================================================================

class ValueInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueInfoProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::onnx::TypeProto& type(const ValueInfoProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::TypeProto&
ValueInfoProto::_Internal::type(const ValueInfoProto* msg) {
  return *msg->_impl_.type_;
}
ValueInfoProto::ValueInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.ValueInfoProto)
}
ValueInfoProto::ValueInfoProto(const ValueInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::onnx::TypeProto(*from._impl_.type_);
  }
  // @@protoc_insertion_point(copy_constructor:onnx.ValueInfoProto)
}

inline void ValueInfoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.type_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValueInfoProto::~ValueInfoProto() {
  // @@protoc_insertion_point(destructor:onnx.ValueInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
}

void ValueInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ValueInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.type_ != nullptr);
      _impl_.type_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.ValueInfoProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.ValueInfoProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.ValueInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.ValueInfoProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .onnx.TypeProto type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional string doc_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.ValueInfoProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.ValueInfoProto)
  return target;
}

size_t ValueInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ValueInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string doc_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional .onnx.TypeProto type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueInfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueInfoProto::GetClassData() const { return &_class_data_; }


void ValueInfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueInfoProto*>(&to_msg);
  auto& from = static_cast<const ValueInfoProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.ValueInfoProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_type()->::onnx::TypeProto::MergeFrom(
          from._internal_type());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueInfoProto::CopyFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ValueInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueInfoProto::IsInitialized() const {
  return true;
}

void ValueInfoProto::InternalSwap(ValueInfoProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[1]);
}

// ===================================================================

class NodeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NodeProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NodeProto::NodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.NodeProto)
}
NodeProto::NodeProto(const NodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_){from._impl_.input_}
    , decltype(_impl_.output_){from._impl_.output_}
    , decltype(_impl_.attribute_){from._impl_.attribute_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.domain_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_op_type()) {
    _this->_impl_.op_type_.Set(from._internal_op_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onnx.NodeProto)
}

inline void NodeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_){arena}
    , decltype(_impl_.output_){arena}
    , decltype(_impl_.attribute_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.domain_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:onnx.NodeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_.~RepeatedPtrField();
  _impl_.output_.~RepeatedPtrField();
  _impl_.attribute_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.op_type_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.domain_.Destroy();
}

void NodeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.NodeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.Clear();
  _impl_.output_.Clear();
  _impl_.attribute_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.op_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "onnx.NodeProto.input");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "onnx.NodeProto.output");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.NodeProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string op_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_op_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.NodeProto.op_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.AttributeProto attribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.NodeProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.NodeProto.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.NodeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.NodeProto.input");
    target = stream->WriteString(1, s, target);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.NodeProto.output");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.NodeProto.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string op_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.NodeProto.op_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_op_type(), target);
  }

  // repeated .onnx.AttributeProto attribute = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string doc_string = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.NodeProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_doc_string(), target);
  }

  // optional string domain = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.NodeProto.domain");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.NodeProto)
  return target;
}

size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.NodeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_.size());
  for (int i = 0, n = _impl_.input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_.Get(i));
  }

  // repeated string output = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_.size());
  for (int i = 0, n = _impl_.output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_.Get(i));
  }

  // repeated .onnx.AttributeProto attribute = 5;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_impl_.attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string op_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_op_type());
    }

    // optional string doc_string = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional string domain = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeProto::GetClassData() const { return &_class_data_; }


void NodeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeProto*>(&to_msg);
  auto& from = static_cast<const NodeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.NodeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_.MergeFrom(from._impl_.input_);
  _this->_impl_.output_.MergeFrom(from._impl_.output_);
  _this->_impl_.attribute_.MergeFrom(from._impl_.attribute_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_op_type(from._internal_op_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_domain(from._internal_domain());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeProto::IsInitialized() const {
  return true;
}

void NodeProto::InternalSwap(NodeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.output_.InternalSwap(&other->_impl_.output_);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_type_, lhs_arena,
      &other->_impl_.op_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[2]);
}

// ===================================================================

class TrainingInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainingInfoProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_._has_bits_);
  static const ::onnx::GraphProto& initialization(const TrainingInfoProto* msg);
  static void set_has_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::onnx::GraphProto& algorithm(const TrainingInfoProto* msg);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::GraphProto&
TrainingInfoProto::_Internal::initialization(const TrainingInfoProto* msg) {
  return *msg->_impl_.initialization_;
}
const ::onnx::GraphProto&
TrainingInfoProto::_Internal::algorithm(const TrainingInfoProto* msg) {
  return *msg->_impl_.algorithm_;
}
TrainingInfoProto::TrainingInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TrainingInfoProto)
}
TrainingInfoProto::TrainingInfoProto(const TrainingInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrainingInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initialization_binding_){from._impl_.initialization_binding_}
    , decltype(_impl_.update_binding_){from._impl_.update_binding_}
    , decltype(_impl_.initialization_){nullptr}
    , decltype(_impl_.algorithm_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initialization()) {
    _this->_impl_.initialization_ = new ::onnx::GraphProto(*from._impl_.initialization_);
  }
  if (from._internal_has_algorithm()) {
    _this->_impl_.algorithm_ = new ::onnx::GraphProto(*from._impl_.algorithm_);
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TrainingInfoProto)
}

inline void TrainingInfoProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initialization_binding_){arena}
    , decltype(_impl_.update_binding_){arena}
    , decltype(_impl_.initialization_){nullptr}
    , decltype(_impl_.algorithm_){nullptr}
  };
}

TrainingInfoProto::~TrainingInfoProto() {
  // @@protoc_insertion_point(destructor:onnx.TrainingInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainingInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initialization_binding_.~RepeatedPtrField();
  _impl_.update_binding_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.initialization_;
  if (this != internal_default_instance()) delete _impl_.algorithm_;
}

void TrainingInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainingInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TrainingInfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initialization_binding_.Clear();
  _impl_.update_binding_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.initialization_ != nullptr);
      _impl_.initialization_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.algorithm_ != nullptr);
      _impl_.algorithm_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainingInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .onnx.GraphProto initialization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.GraphProto algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.StringStringEntryProto initialization_binding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_initialization_binding(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.StringStringEntryProto update_binding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_binding(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainingInfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TrainingInfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .onnx.GraphProto initialization = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::initialization(this),
        _Internal::initialization(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.GraphProto algorithm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::algorithm(this),
        _Internal::algorithm(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initialization_binding_size()); i < n; i++) {
    const auto& repfield = this->_internal_initialization_binding(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto update_binding = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_update_binding_size()); i < n; i++) {
    const auto& repfield = this->_internal_update_binding(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TrainingInfoProto)
  return target;
}

size_t TrainingInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TrainingInfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  total_size += 1UL * this->_internal_initialization_binding_size();
  for (const auto& msg : this->_impl_.initialization_binding_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.StringStringEntryProto update_binding = 4;
  total_size += 1UL * this->_internal_update_binding_size();
  for (const auto& msg : this->_impl_.update_binding_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .onnx.GraphProto initialization = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.initialization_);
    }

    // optional .onnx.GraphProto algorithm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.algorithm_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainingInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrainingInfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainingInfoProto::GetClassData() const { return &_class_data_; }


void TrainingInfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrainingInfoProto*>(&to_msg);
  auto& from = static_cast<const TrainingInfoProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TrainingInfoProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.initialization_binding_.MergeFrom(from._impl_.initialization_binding_);
  _this->_impl_.update_binding_.MergeFrom(from._impl_.update_binding_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_initialization()->::onnx::GraphProto::MergeFrom(
          from._internal_initialization());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_algorithm()->::onnx::GraphProto::MergeFrom(
          from._internal_algorithm());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingInfoProto::CopyFrom(const TrainingInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TrainingInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingInfoProto::IsInitialized() const {
  return true;
}

void TrainingInfoProto::InternalSwap(TrainingInfoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.initialization_binding_.InternalSwap(&other->_impl_.initialization_binding_);
  _impl_.update_binding_.InternalSwap(&other->_impl_.update_binding_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.algorithm_)
      + sizeof(TrainingInfoProto::_impl_.algorithm_)
      - PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.initialization_)>(
          reinterpret_cast<char*>(&_impl_.initialization_),
          reinterpret_cast<char*>(&other->_impl_.initialization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[3]);
}

// ===================================================================

class ModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelProto, _impl_._has_bits_);
  static void set_has_ir_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_producer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::onnx::GraphProto& graph(const ModelProto* msg);
  static void set_has_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::onnx::GraphProto&
ModelProto::_Internal::graph(const ModelProto* msg) {
  return *msg->_impl_.graph_;
}
ModelProto::ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.ModelProto)
}
ModelProto::ModelProto(const ModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.opset_import_){from._impl_.opset_import_}
    , decltype(_impl_.metadata_props_){from._impl_.metadata_props_}
    , decltype(_impl_.training_info_){from._impl_.training_info_}
    , decltype(_impl_.functions_){from._impl_.functions_}
    , decltype(_impl_.producer_name_){}
    , decltype(_impl_.producer_version_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.ir_version_){}
    , decltype(_impl_.model_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.producer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_producer_name()) {
    _this->_impl_.producer_name_.Set(from._internal_producer_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.producer_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_producer_version()) {
    _this->_impl_.producer_version_.Set(from._internal_producer_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_graph()) {
    _this->_impl_.graph_ = new ::onnx::GraphProto(*from._impl_.graph_);
  }
  ::memcpy(&_impl_.ir_version_, &from._impl_.ir_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.model_version_) -
    reinterpret_cast<char*>(&_impl_.ir_version_)) + sizeof(_impl_.model_version_));
  // @@protoc_insertion_point(copy_constructor:onnx.ModelProto)
}

inline void ModelProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.opset_import_){arena}
    , decltype(_impl_.metadata_props_){arena}
    , decltype(_impl_.training_info_){arena}
    , decltype(_impl_.functions_){arena}
    , decltype(_impl_.producer_name_){}
    , decltype(_impl_.producer_version_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.ir_version_){int64_t{0}}
    , decltype(_impl_.model_version_){int64_t{0}}
  };
  _impl_.producer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelProto::~ModelProto() {
  // @@protoc_insertion_point(destructor:onnx.ModelProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opset_import_.~RepeatedPtrField();
  _impl_.metadata_props_.~RepeatedPtrField();
  _impl_.training_info_.~RepeatedPtrField();
  _impl_.functions_.~RepeatedPtrField();
  _impl_.producer_name_.Destroy();
  _impl_.producer_version_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.doc_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.graph_;
}

void ModelProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ModelProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opset_import_.Clear();
  _impl_.metadata_props_.Clear();
  _impl_.training_info_.Clear();
  _impl_.functions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.producer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.producer_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.graph_ != nullptr);
      _impl_.graph_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.ir_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.model_version_) -
        reinterpret_cast<char*>(&_impl_.ir_version_)) + sizeof(_impl_.model_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 ir_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ir_version(&has_bits);
          _impl_.ir_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string producer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_producer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.ModelProto.producer_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string producer_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_producer_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.ModelProto.producer_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.ModelProto.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 model_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_model_version(&has_bits);
          _impl_.model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.ModelProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.GraphProto graph = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.OperatorSetIdProto opset_import = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opset_import(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.StringStringEntryProto metadata_props = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.TrainingInfoProto training_info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_training_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.FunctionProto functions = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.ModelProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 ir_version = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_ir_version(), target);
  }

  // optional string producer_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_producer_name().data(), static_cast<int>(this->_internal_producer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.ModelProto.producer_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_producer_name(), target);
  }

  // optional string producer_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_producer_version().data(), static_cast<int>(this->_internal_producer_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.ModelProto.producer_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_producer_version(), target);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.ModelProto.domain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_domain(), target);
  }

  // optional int64 model_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_model_version(), target);
  }

  // optional string doc_string = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.ModelProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_doc_string(), target);
  }

  // optional .onnx.GraphProto graph = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opset_import_size()); i < n; i++) {
    const auto& repfield = this->_internal_opset_import(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.TrainingInfoProto training_info = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_training_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_training_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.FunctionProto functions = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_functions_size()); i < n; i++) {
    const auto& repfield = this->_internal_functions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.ModelProto)
  return target;
}

size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ModelProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  total_size += 1UL * this->_internal_opset_import_size();
  for (const auto& msg : this->_impl_.opset_import_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  total_size += 1UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_impl_.metadata_props_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.TrainingInfoProto training_info = 20;
  total_size += 2UL * this->_internal_training_info_size();
  for (const auto& msg : this->_impl_.training_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.FunctionProto functions = 25;
  total_size += 2UL * this->_internal_functions_size();
  for (const auto& msg : this->_impl_.functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string producer_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_name());
    }

    // optional string producer_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_version());
    }

    // optional string domain = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string doc_string = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional .onnx.GraphProto graph = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.graph_);
    }

    // optional int64 ir_version = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ir_version());
    }

    // optional int64 model_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_model_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelProto::GetClassData() const { return &_class_data_; }


void ModelProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelProto*>(&to_msg);
  auto& from = static_cast<const ModelProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.ModelProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opset_import_.MergeFrom(from._impl_.opset_import_);
  _this->_impl_.metadata_props_.MergeFrom(from._impl_.metadata_props_);
  _this->_impl_.training_info_.MergeFrom(from._impl_.training_info_);
  _this->_impl_.functions_.MergeFrom(from._impl_.functions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_producer_name(from._internal_producer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_producer_version(from._internal_producer_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_graph()->::onnx::GraphProto::MergeFrom(
          from._internal_graph());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ir_version_ = from._impl_.ir_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.model_version_ = from._impl_.model_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto::IsInitialized() const {
  return true;
}

void ModelProto::InternalSwap(ModelProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.opset_import_.InternalSwap(&other->_impl_.opset_import_);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  _impl_.training_info_.InternalSwap(&other->_impl_.training_info_);
  _impl_.functions_.InternalSwap(&other->_impl_.functions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producer_name_, lhs_arena,
      &other->_impl_.producer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producer_version_, lhs_arena,
      &other->_impl_.producer_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.model_version_)
      + sizeof(ModelProto::_impl_.model_version_)
      - PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.graph_)>(
          reinterpret_cast<char*>(&_impl_.graph_),
          reinterpret_cast<char*>(&other->_impl_.graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[4]);
}

// ===================================================================

class StringStringEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StringStringEntryProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StringStringEntryProto, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StringStringEntryProto::StringStringEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.StringStringEntryProto)
}
StringStringEntryProto::StringStringEntryProto(const StringStringEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringStringEntryProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onnx.StringStringEntryProto)
}

inline void StringStringEntryProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringStringEntryProto::~StringStringEntryProto() {
  // @@protoc_insertion_point(destructor:onnx.StringStringEntryProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringStringEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void StringStringEntryProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringStringEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.StringStringEntryProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringStringEntryProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.StringStringEntryProto.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.StringStringEntryProto.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringStringEntryProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.StringStringEntryProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.StringStringEntryProto.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.StringStringEntryProto.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.StringStringEntryProto)
  return target;
}

size_t StringStringEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.StringStringEntryProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringStringEntryProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringStringEntryProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringStringEntryProto::GetClassData() const { return &_class_data_; }


void StringStringEntryProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringStringEntryProto*>(&to_msg);
  auto& from = static_cast<const StringStringEntryProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.StringStringEntryProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringStringEntryProto::CopyFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.StringStringEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringStringEntryProto::IsInitialized() const {
  return true;
}

void StringStringEntryProto::InternalSwap(StringStringEntryProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringStringEntryProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[5]);
}

// ===================================================================

class TensorAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorAnnotation>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TensorAnnotation, _impl_._has_bits_);
  static void set_has_tensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TensorAnnotation::TensorAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorAnnotation)
}
TensorAnnotation::TensorAnnotation(const TensorAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quant_parameter_tensor_names_){from._impl_.quant_parameter_tensor_names_}
    , decltype(_impl_.tensor_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tensor_name()) {
    _this->_impl_.tensor_name_.Set(from._internal_tensor_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TensorAnnotation)
}

inline void TensorAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quant_parameter_tensor_names_){arena}
    , decltype(_impl_.tensor_name_){}
  };
  _impl_.tensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TensorAnnotation::~TensorAnnotation() {
  // @@protoc_insertion_point(destructor:onnx.TensorAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quant_parameter_tensor_names_.~RepeatedPtrField();
  _impl_.tensor_name_.Destroy();
}

void TensorAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quant_parameter_tensor_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tensor_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TensorAnnotation.tensor_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quant_parameter_tensor_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tensor_name().data(), static_cast<int>(this->_internal_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TensorAnnotation.tensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tensor_name(), target);
  }

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quant_parameter_tensor_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_quant_parameter_tensor_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorAnnotation)
  return target;
}

size_t TensorAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  total_size += 1UL * this->_internal_quant_parameter_tensor_names_size();
  for (const auto& msg : this->_impl_.quant_parameter_tensor_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string tensor_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tensor_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorAnnotation::GetClassData() const { return &_class_data_; }


void TensorAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorAnnotation*>(&to_msg);
  auto& from = static_cast<const TensorAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorAnnotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quant_parameter_tensor_names_.MergeFrom(from._impl_.quant_parameter_tensor_names_);
  if (from._internal_has_tensor_name()) {
    _this->_internal_set_tensor_name(from._internal_tensor_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorAnnotation::CopyFrom(const TensorAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorAnnotation::IsInitialized() const {
  return true;
}

void TensorAnnotation::InternalSwap(TensorAnnotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.quant_parameter_tensor_names_.InternalSwap(&other->_impl_.quant_parameter_tensor_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tensor_name_, lhs_arena,
      &other->_impl_.tensor_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[6]);
}

// ===================================================================

class GraphProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GraphProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GraphProto::GraphProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.GraphProto)
}
GraphProto::GraphProto(const GraphProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.initializer_){from._impl_.initializer_}
    , decltype(_impl_.input_){from._impl_.input_}
    , decltype(_impl_.output_){from._impl_.output_}
    , decltype(_impl_.value_info_){from._impl_.value_info_}
    , decltype(_impl_.quantization_annotation_){from._impl_.quantization_annotation_}
    , decltype(_impl_.sparse_initializer_){from._impl_.sparse_initializer_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onnx.GraphProto)
}

inline void GraphProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_){arena}
    , decltype(_impl_.initializer_){arena}
    , decltype(_impl_.input_){arena}
    , decltype(_impl_.output_){arena}
    , decltype(_impl_.value_info_){arena}
    , decltype(_impl_.quantization_annotation_){arena}
    , decltype(_impl_.sparse_initializer_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphProto::~GraphProto() {
  // @@protoc_insertion_point(destructor:onnx.GraphProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.~RepeatedPtrField();
  _impl_.initializer_.~RepeatedPtrField();
  _impl_.input_.~RepeatedPtrField();
  _impl_.output_.~RepeatedPtrField();
  _impl_.value_info_.~RepeatedPtrField();
  _impl_.quantization_annotation_.~RepeatedPtrField();
  _impl_.sparse_initializer_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
}

void GraphProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.GraphProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.initializer_.Clear();
  _impl_.input_.Clear();
  _impl_.output_.Clear();
  _impl_.value_info_.Clear();
  _impl_.quantization_annotation_.Clear();
  _impl_.sparse_initializer_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onnx.NodeProto node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.GraphProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.TensorProto initializer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_initializer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.GraphProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.ValueInfoProto input = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.ValueInfoProto output = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.ValueInfoProto value_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.TensorAnnotation quantization_annotation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantization_annotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.SparseTensorProto sparse_initializer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sparse_initializer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.GraphProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onnx.NodeProto node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.GraphProto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .onnx.TensorProto initializer = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initializer_size()); i < n; i++) {
    const auto& repfield = this->_internal_initializer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string doc_string = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.GraphProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_doc_string(), target);
  }

  // repeated .onnx.ValueInfoProto input = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_size()); i < n; i++) {
    const auto& repfield = this->_internal_input(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.ValueInfoProto output = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_output_size()); i < n; i++) {
    const auto& repfield = this->_internal_output(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.ValueInfoProto value_info = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quantization_annotation_size()); i < n; i++) {
    const auto& repfield = this->_internal_quantization_annotation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sparse_initializer_size()); i < n; i++) {
    const auto& repfield = this->_internal_sparse_initializer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.GraphProto)
  return target;
}

size_t GraphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.GraphProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.NodeProto node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.TensorProto initializer = 5;
  total_size += 1UL * this->_internal_initializer_size();
  for (const auto& msg : this->_impl_.initializer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.ValueInfoProto input = 11;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->_impl_.input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.ValueInfoProto output = 12;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->_impl_.output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.ValueInfoProto value_info = 13;
  total_size += 1UL * this->_internal_value_info_size();
  for (const auto& msg : this->_impl_.value_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  total_size += 1UL * this->_internal_quantization_annotation_size();
  for (const auto& msg : this->_impl_.quantization_annotation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  total_size += 1UL * this->_internal_sparse_initializer_size();
  for (const auto& msg : this->_impl_.sparse_initializer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string doc_string = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphProto::GetClassData() const { return &_class_data_; }


void GraphProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphProto*>(&to_msg);
  auto& from = static_cast<const GraphProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.GraphProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.initializer_.MergeFrom(from._impl_.initializer_);
  _this->_impl_.input_.MergeFrom(from._impl_.input_);
  _this->_impl_.output_.MergeFrom(from._impl_.output_);
  _this->_impl_.value_info_.MergeFrom(from._impl_.value_info_);
  _this->_impl_.quantization_annotation_.MergeFrom(from._impl_.quantization_annotation_);
  _this->_impl_.sparse_initializer_.MergeFrom(from._impl_.sparse_initializer_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphProto::CopyFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.GraphProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphProto::IsInitialized() const {
  return true;
}

void GraphProto::InternalSwap(GraphProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.initializer_.InternalSwap(&other->_impl_.initializer_);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.output_.InternalSwap(&other->_impl_.output_);
  _impl_.value_info_.InternalSwap(&other->_impl_.value_info_);
  _impl_.quantization_annotation_.InternalSwap(&other->_impl_.quantization_annotation_);
  _impl_.sparse_initializer_.InternalSwap(&other->_impl_.sparse_initializer_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[7]);
}

// ===================================================================

class TensorProto_Segment::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorProto_Segment>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_._has_bits_);
  static void set_has_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TensorProto_Segment::TensorProto_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorProto.Segment)
}
TensorProto_Segment::TensorProto_Segment(const TensorProto_Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorProto_Segment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_){}
    , decltype(_impl_.end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_, &from._impl_.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.begin_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:onnx.TensorProto.Segment)
}

inline void TensorProto_Segment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_){int64_t{0}}
    , decltype(_impl_.end_){int64_t{0}}
  };
}

TensorProto_Segment::~TensorProto_Segment() {
  // @@protoc_insertion_point(destructor:onnx.TensorProto.Segment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorProto_Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TensorProto_Segment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorProto_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto.Segment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_) -
        reinterpret_cast<char*>(&_impl_.begin_)) + sizeof(_impl_.end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorProto_Segment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin(&has_bits);
          _impl_.begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorProto_Segment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorProto.Segment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_begin(), target);
  }

  // optional int64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorProto.Segment)
  return target;
}

size_t TensorProto_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto.Segment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 begin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin());
    }

    // optional int64 end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorProto_Segment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorProto_Segment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorProto_Segment::GetClassData() const { return &_class_data_; }


void TensorProto_Segment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorProto_Segment*>(&to_msg);
  auto& from = static_cast<const TensorProto_Segment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto.Segment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begin_ = from._impl_.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorProto_Segment::CopyFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto_Segment::IsInitialized() const {
  return true;
}

void TensorProto_Segment::InternalSwap(TensorProto_Segment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.end_)
      + sizeof(TensorProto_Segment::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.begin_)>(
          reinterpret_cast<char*>(&_impl_.begin_),
          reinterpret_cast<char*>(&other->_impl_.begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorProto_Segment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[8]);
}

// ===================================================================

class TensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TensorProto, _impl_._has_bits_);
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::onnx::TensorProto_Segment& segment(const TensorProto* msg);
  static void set_has_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::onnx::TensorProto_Segment&
TensorProto::_Internal::segment(const TensorProto* msg) {
  return *msg->_impl_.segment_;
}
TensorProto::TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dims_){from._impl_.dims_}
    , decltype(_impl_.float_data_){from._impl_.float_data_}
    , decltype(_impl_.int32_data_){from._impl_.int32_data_}
    , /*decltype(_impl_._int32_data_cached_byte_size_)*/{0}
    , decltype(_impl_.string_data_){from._impl_.string_data_}
    , decltype(_impl_.int64_data_){from._impl_.int64_data_}
    , /*decltype(_impl_._int64_data_cached_byte_size_)*/{0}
    , decltype(_impl_.double_data_){from._impl_.double_data_}
    , decltype(_impl_.uint64_data_){from._impl_.uint64_data_}
    , /*decltype(_impl_._uint64_data_cached_byte_size_)*/{0}
    , decltype(_impl_.external_data_){from._impl_.external_data_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.raw_data_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.segment_){nullptr}
    , decltype(_impl_.data_type_){}
    , decltype(_impl_.data_location_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.raw_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_raw_data()) {
    _this->_impl_.raw_data_.Set(from._internal_raw_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_segment()) {
    _this->_impl_.segment_ = new ::onnx::TensorProto_Segment(*from._impl_.segment_);
  }
  ::memcpy(&_impl_.data_type_, &from._impl_.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_location_) -
    reinterpret_cast<char*>(&_impl_.data_type_)) + sizeof(_impl_.data_location_));
  // @@protoc_insertion_point(copy_constructor:onnx.TensorProto)
}

inline void TensorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dims_){arena}
    , decltype(_impl_.float_data_){arena}
    , decltype(_impl_.int32_data_){arena}
    , /*decltype(_impl_._int32_data_cached_byte_size_)*/{0}
    , decltype(_impl_.string_data_){arena}
    , decltype(_impl_.int64_data_){arena}
    , /*decltype(_impl_._int64_data_cached_byte_size_)*/{0}
    , decltype(_impl_.double_data_){arena}
    , decltype(_impl_.uint64_data_){arena}
    , /*decltype(_impl_._uint64_data_cached_byte_size_)*/{0}
    , decltype(_impl_.external_data_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.raw_data_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.segment_){nullptr}
    , decltype(_impl_.data_type_){0}
    , decltype(_impl_.data_location_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:onnx.TensorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dims_.~RepeatedField();
  _impl_.float_data_.~RepeatedField();
  _impl_.int32_data_.~RepeatedField();
  _impl_.string_data_.~RepeatedPtrField();
  _impl_.int64_data_.~RepeatedField();
  _impl_.double_data_.~RepeatedField();
  _impl_.uint64_data_.~RepeatedField();
  _impl_.external_data_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.raw_data_.Destroy();
  _impl_.doc_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.segment_;
}

void TensorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dims_.Clear();
  _impl_.float_data_.Clear();
  _impl_.int32_data_.Clear();
  _impl_.string_data_.Clear();
  _impl_.int64_data_.Clear();
  _impl_.double_data_.Clear();
  _impl_.uint64_data_.Clear();
  _impl_.external_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.raw_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.segment_ != nullptr);
      _impl_.segment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.data_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_location_) -
        reinterpret_cast<char*>(&_impl_.data_type_)) + sizeof(_impl_.data_location_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_type(&has_bits);
          _impl_.data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorProto.Segment segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float float_data = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_float_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int32_data = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_int32_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes string_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 int64_data = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_int64_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TensorProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes raw_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_raw_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_data = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_double_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 uint64_data = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_uint64_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TensorProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.StringStringEntryProto external_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorProto.DataLocation data_location = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::onnx::TensorProto_DataLocation_IsValid(val))) {
            _internal_set_data_location(static_cast<::onnx::TensorProto_DataLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_dims(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_type(), target);
  }

  // optional .onnx.TensorProto.Segment segment = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::segment(this),
        _Internal::segment(this).GetCachedSize(), target, stream);
  }

  // repeated float float_data = 4 [packed = true];
  if (this->_internal_float_data_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_float_data(), target);
  }

  // repeated int32 int32_data = 5 [packed = true];
  {
    int byte_size = _impl_._int32_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_int32_data(), byte_size, target);
    }
  }

  // repeated bytes string_data = 6;
  for (int i = 0, n = this->_internal_string_data_size(); i < n; i++) {
    const auto& s = this->_internal_string_data(i);
    target = stream->WriteBytes(6, s, target);
  }

  // repeated int64 int64_data = 7 [packed = true];
  {
    int byte_size = _impl_._int64_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_int64_data(), byte_size, target);
    }
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TensorProto.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // optional bytes raw_data = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_raw_data(), target);
  }

  // repeated double double_data = 10 [packed = true];
  if (this->_internal_double_data_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_double_data(), target);
  }

  // repeated uint64 uint64_data = 11 [packed = true];
  {
    int byte_size = _impl_._uint64_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_uint64_data(), byte_size, target);
    }
  }

  // optional string doc_string = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TensorProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_doc_string(), target);
  }

  // repeated .onnx.StringStringEntryProto external_data = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .onnx.TensorProto.DataLocation data_location = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_data_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dims_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  // repeated float float_data = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 int32_data = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int32_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int32_data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_data_.size());
  for (int i = 0, n = _impl_.string_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.string_data_.Get(i));
  }

  // repeated int64 int64_data = 7 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.int64_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int64_data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated double double_data = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint64 uint64_data = 11 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.uint64_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._uint64_data_cached_byte_size_.Set(cached_size);
    total_size += data_size;
  }

  // repeated .onnx.StringStringEntryProto external_data = 13;
  total_size += 1UL * this->_internal_external_data_size();
  for (const auto& msg : this->_impl_.external_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes raw_data = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw_data());
    }

    // optional string doc_string = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional .onnx.TensorProto.Segment segment = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.segment_);
    }

    // optional int32 data_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type());
    }

    // optional .onnx.TensorProto.DataLocation data_location = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_data_location());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorProto::GetClassData() const { return &_class_data_; }


void TensorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorProto*>(&to_msg);
  auto& from = static_cast<const TensorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dims_.MergeFrom(from._impl_.dims_);
  _this->_impl_.float_data_.MergeFrom(from._impl_.float_data_);
  _this->_impl_.int32_data_.MergeFrom(from._impl_.int32_data_);
  _this->_impl_.string_data_.MergeFrom(from._impl_.string_data_);
  _this->_impl_.int64_data_.MergeFrom(from._impl_.int64_data_);
  _this->_impl_.double_data_.MergeFrom(from._impl_.double_data_);
  _this->_impl_.uint64_data_.MergeFrom(from._impl_.uint64_data_);
  _this->_impl_.external_data_.MergeFrom(from._impl_.external_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_raw_data(from._internal_raw_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_segment()->::onnx::TensorProto_Segment::MergeFrom(
          from._internal_segment());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.data_type_ = from._impl_.data_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.data_location_ = from._impl_.data_location_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  return true;
}

void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dims_.InternalSwap(&other->_impl_.dims_);
  _impl_.float_data_.InternalSwap(&other->_impl_.float_data_);
  _impl_.int32_data_.InternalSwap(&other->_impl_.int32_data_);
  _impl_.string_data_.InternalSwap(&other->_impl_.string_data_);
  _impl_.int64_data_.InternalSwap(&other->_impl_.int64_data_);
  _impl_.double_data_.InternalSwap(&other->_impl_.double_data_);
  _impl_.uint64_data_.InternalSwap(&other->_impl_.uint64_data_);
  _impl_.external_data_.InternalSwap(&other->_impl_.external_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_data_, lhs_arena,
      &other->_impl_.raw_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.data_location_)
      + sizeof(TensorProto::_impl_.data_location_)
      - PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.segment_)>(
          reinterpret_cast<char*>(&_impl_.segment_),
          reinterpret_cast<char*>(&other->_impl_.segment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[9]);
}

// ===================================================================

class SparseTensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseTensorProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_._has_bits_);
  static const ::onnx::TensorProto& values(const SparseTensorProto* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::onnx::TensorProto& indices(const SparseTensorProto* msg);
  static void set_has_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::TensorProto&
SparseTensorProto::_Internal::values(const SparseTensorProto* msg) {
  return *msg->_impl_.values_;
}
const ::onnx::TensorProto&
SparseTensorProto::_Internal::indices(const SparseTensorProto* msg) {
  return *msg->_impl_.indices_;
}
SparseTensorProto::SparseTensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.SparseTensorProto)
}
SparseTensorProto::SparseTensorProto(const SparseTensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseTensorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dims_){from._impl_.dims_}
    , decltype(_impl_.values_){nullptr}
    , decltype(_impl_.indices_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_values()) {
    _this->_impl_.values_ = new ::onnx::TensorProto(*from._impl_.values_);
  }
  if (from._internal_has_indices()) {
    _this->_impl_.indices_ = new ::onnx::TensorProto(*from._impl_.indices_);
  }
  // @@protoc_insertion_point(copy_constructor:onnx.SparseTensorProto)
}

inline void SparseTensorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dims_){arena}
    , decltype(_impl_.values_){nullptr}
    , decltype(_impl_.indices_){nullptr}
  };
}

SparseTensorProto::~SparseTensorProto() {
  // @@protoc_insertion_point(destructor:onnx.SparseTensorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseTensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dims_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.values_;
  if (this != internal_default_instance()) delete _impl_.indices_;
}

void SparseTensorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.SparseTensorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dims_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.values_ != nullptr);
      _impl_.values_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.indices_ != nullptr);
      _impl_.indices_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseTensorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .onnx.TensorProto values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorProto indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_indices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseTensorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.SparseTensorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .onnx.TensorProto values = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::values(this),
        _Internal::values(this).GetCachedSize(), target, stream);
  }

  // optional .onnx.TensorProto indices = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::indices(this),
        _Internal::indices(this).GetCachedSize(), target, stream);
  }

  // repeated int64 dims = 3;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_dims(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.SparseTensorProto)
  return target;
}

size_t SparseTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.SparseTensorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dims_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .onnx.TensorProto values = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.values_);
    }

    // optional .onnx.TensorProto indices = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.indices_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseTensorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseTensorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseTensorProto::GetClassData() const { return &_class_data_; }


void SparseTensorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseTensorProto*>(&to_msg);
  auto& from = static_cast<const SparseTensorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.SparseTensorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dims_.MergeFrom(from._impl_.dims_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_values()->::onnx::TensorProto::MergeFrom(
          from._internal_values());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_indices()->::onnx::TensorProto::MergeFrom(
          from._internal_indices());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseTensorProto::CopyFrom(const SparseTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.SparseTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseTensorProto::IsInitialized() const {
  return true;
}

void SparseTensorProto::InternalSwap(SparseTensorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dims_.InternalSwap(&other->_impl_.dims_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.indices_)
      + sizeof(SparseTensorProto::_impl_.indices_)
      - PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.values_)>(
          reinterpret_cast<char*>(&_impl_.values_),
          reinterpret_cast<char*>(&other->_impl_.values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseTensorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[10]);
}

// ===================================================================

class TensorShapeProto_Dimension::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorShapeProto_Dimension>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TensorShapeProto_Dimension, _impl_._has_bits_);
  static constexpr int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _impl_._oneof_case_);
  static void set_has_denotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TensorShapeProto_Dimension::TensorShapeProto_Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorShapeProto.Dimension)
}
TensorShapeProto_Dimension::TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorShapeProto_Dimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denotation_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.denotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_denotation()) {
    _this->_impl_.denotation_.Set(from._internal_denotation(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kDimValue: {
      _this->_internal_set_dim_value(from._internal_dim_value());
      break;
    }
    case kDimParam: {
      _this->_internal_set_dim_param(from._internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto.Dimension)
}

inline void TensorShapeProto_Dimension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denotation_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.denotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.denotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

TensorShapeProto_Dimension::~TensorShapeProto_Dimension() {
  // @@protoc_insertion_point(destructor:onnx.TensorShapeProto.Dimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorShapeProto_Dimension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denotation_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void TensorShapeProto_Dimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorShapeProto_Dimension::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TensorShapeProto.Dimension)
  switch (value_case()) {
    case kDimValue: {
      // No need to clear
      break;
    }
    case kDimParam: {
      _impl_.value_.dim_param_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void TensorShapeProto_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto.Dimension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.denotation_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorShapeProto_Dimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dim_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_dim_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dim_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dim_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TensorShapeProto.Dimension.dim_param");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string denotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_denotation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TensorShapeProto.Dimension.denotation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorShapeProto_Dimension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorShapeProto.Dimension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kDimValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_dim_value(), target);
      break;
    }
    case kDimParam: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_dim_param().data(), static_cast<int>(this->_internal_dim_param().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "onnx.TensorShapeProto.Dimension.dim_param");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_dim_param(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string denotation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_denotation().data(), static_cast<int>(this->_internal_denotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TensorShapeProto.Dimension.denotation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_denotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorShapeProto.Dimension)
  return target;
}

size_t TensorShapeProto_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto.Dimension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string denotation = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denotation());
  }

  switch (value_case()) {
    // int64 dim_value = 1;
    case kDimValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dim_value());
      break;
    }
    // string dim_param = 2;
    case kDimParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorShapeProto_Dimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorShapeProto_Dimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorShapeProto_Dimension::GetClassData() const { return &_class_data_; }


void TensorShapeProto_Dimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorShapeProto_Dimension*>(&to_msg);
  auto& from = static_cast<const TensorShapeProto_Dimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto.Dimension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_denotation()) {
    _this->_internal_set_denotation(from._internal_denotation());
  }
  switch (from.value_case()) {
    case kDimValue: {
      _this->_internal_set_dim_value(from._internal_dim_value());
      break;
    }
    case kDimParam: {
      _this->_internal_set_dim_param(from._internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorShapeProto_Dimension::CopyFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShapeProto_Dimension::IsInitialized() const {
  return true;
}

void TensorShapeProto_Dimension::InternalSwap(TensorShapeProto_Dimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.denotation_, lhs_arena,
      &other->_impl_.denotation_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto_Dimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[11]);
}

// ===================================================================

class TensorShapeProto::_Internal {
 public:
};

TensorShapeProto::TensorShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorShapeProto)
}
TensorShapeProto::TensorShapeProto(const TensorShapeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorShapeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dim_){from._impl_.dim_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto)
}

inline void TensorShapeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dim_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TensorShapeProto::~TensorShapeProto() {
  // @@protoc_insertion_point(destructor:onnx.TensorShapeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorShapeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dim_.~RepeatedPtrField();
}

void TensorShapeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorShapeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onnx.TensorShapeProto.Dimension dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorShapeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorShapeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dim_size()); i < n; i++) {
    const auto& repfield = this->_internal_dim(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorShapeProto)
  return target;
}

size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  total_size += 1UL * this->_internal_dim_size();
  for (const auto& msg : this->_impl_.dim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorShapeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorShapeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorShapeProto::GetClassData() const { return &_class_data_; }


void TensorShapeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorShapeProto*>(&to_msg);
  auto& from = static_cast<const TensorShapeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dim_.MergeFrom(from._impl_.dim_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorShapeProto::CopyFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShapeProto::IsInitialized() const {
  return true;
}

void TensorShapeProto::InternalSwap(TensorShapeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dim_.InternalSwap(&other->_impl_.dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[12]);
}

// ===================================================================

class TypeProto_Tensor::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Tensor>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_._has_bits_);
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::TensorShapeProto& shape(const TypeProto_Tensor* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TensorShapeProto&
TypeProto_Tensor::_Internal::shape(const TypeProto_Tensor* msg) {
  return *msg->_impl_.shape_;
}
TypeProto_Tensor::TypeProto_Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Tensor)
}
TypeProto_Tensor::TypeProto_Tensor(const TypeProto_Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto_Tensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.elem_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::onnx::TensorShapeProto(*from._impl_.shape_);
  }
  _this->_impl_.elem_type_ = from._impl_.elem_type_;
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Tensor)
}

inline void TypeProto_Tensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.elem_type_){0}
  };
}

TypeProto_Tensor::~TypeProto_Tensor() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Tensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto_Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void TypeProto_Tensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto_Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Tensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  _impl_.elem_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto_Tensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 elem_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_elem_type(&has_bits);
          _impl_.elem_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto_Tensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Tensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 elem_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_elem_type(), target);
  }

  // optional .onnx.TensorShapeProto shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Tensor)
  return target;
}

size_t TypeProto_Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Tensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .onnx.TensorShapeProto shape = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shape_);
    }

    // optional int32 elem_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto_Tensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto_Tensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto_Tensor::GetClassData() const { return &_class_data_; }


void TypeProto_Tensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto_Tensor*>(&to_msg);
  auto& from = static_cast<const TypeProto_Tensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Tensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_shape()->::onnx::TensorShapeProto::MergeFrom(
          from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.elem_type_ = from._impl_.elem_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto_Tensor::CopyFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto_Tensor::IsInitialized() const {
  return true;
}

void TypeProto_Tensor::InternalSwap(TypeProto_Tensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.elem_type_)
      + sizeof(TypeProto_Tensor::_impl_.elem_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_Tensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[13]);
}

// ===================================================================

class TypeProto_Sequence::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Sequence>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Sequence, _impl_._has_bits_);
  static const ::onnx::TypeProto& elem_type(const TypeProto_Sequence* msg);
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto&
TypeProto_Sequence::_Internal::elem_type(const TypeProto_Sequence* msg) {
  return *msg->_impl_.elem_type_;
}
TypeProto_Sequence::TypeProto_Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Sequence)
}
TypeProto_Sequence::TypeProto_Sequence(const TypeProto_Sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto_Sequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elem_type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_elem_type()) {
    _this->_impl_.elem_type_ = new ::onnx::TypeProto(*from._impl_.elem_type_);
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Sequence)
}

inline void TypeProto_Sequence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elem_type_){nullptr}
  };
}

TypeProto_Sequence::~TypeProto_Sequence() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Sequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto_Sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.elem_type_;
}

void TypeProto_Sequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto_Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Sequence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.elem_type_ != nullptr);
    _impl_.elem_type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto_Sequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .onnx.TypeProto elem_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_elem_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto_Sequence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Sequence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .onnx.TypeProto elem_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::elem_type(this),
        _Internal::elem_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Sequence)
  return target;
}

size_t TypeProto_Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Sequence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .onnx.TypeProto elem_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.elem_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto_Sequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto_Sequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto_Sequence::GetClassData() const { return &_class_data_; }


void TypeProto_Sequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto_Sequence*>(&to_msg);
  auto& from = static_cast<const TypeProto_Sequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Sequence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_elem_type()) {
    _this->_internal_mutable_elem_type()->::onnx::TypeProto::MergeFrom(
        from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto_Sequence::CopyFrom(const TypeProto_Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto_Sequence::IsInitialized() const {
  return true;
}

void TypeProto_Sequence::InternalSwap(TypeProto_Sequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.elem_type_, other->_impl_.elem_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_Sequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[14]);
}

// ===================================================================

class TypeProto_Map::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Map>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::TypeProto& value_type(const TypeProto_Map* msg);
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto&
TypeProto_Map::_Internal::value_type(const TypeProto_Map* msg) {
  return *msg->_impl_.value_type_;
}
TypeProto_Map::TypeProto_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Map)
}
TypeProto_Map::TypeProto_Map(const TypeProto_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto_Map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_type_){nullptr}
    , decltype(_impl_.key_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value_type()) {
    _this->_impl_.value_type_ = new ::onnx::TypeProto(*from._impl_.value_type_);
  }
  _this->_impl_.key_type_ = from._impl_.key_type_;
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Map)
}

inline void TypeProto_Map::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_type_){nullptr}
    , decltype(_impl_.key_type_){0}
  };
}

TypeProto_Map::~TypeProto_Map() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_type_;
}

void TypeProto_Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.value_type_ != nullptr);
    _impl_.value_type_->Clear();
  }
  _impl_.key_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto_Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key_type(&has_bits);
          _impl_.key_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TypeProto value_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto_Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 key_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key_type(), target);
  }

  // optional .onnx.TypeProto value_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value_type(this),
        _Internal::value_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Map)
  return target;
}

size_t TypeProto_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .onnx.TypeProto value_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_type_);
    }

    // optional int32 key_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto_Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto_Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto_Map::GetClassData() const { return &_class_data_; }


void TypeProto_Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto_Map*>(&to_msg);
  auto& from = static_cast<const TypeProto_Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Map)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_value_type()->::onnx::TypeProto::MergeFrom(
          from._internal_value_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_type_ = from._impl_.key_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto_Map::CopyFrom(const TypeProto_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto_Map::IsInitialized() const {
  return true;
}

void TypeProto_Map::InternalSwap(TypeProto_Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.key_type_)
      + sizeof(TypeProto_Map::_impl_.key_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.value_type_)>(
          reinterpret_cast<char*>(&_impl_.value_type_),
          reinterpret_cast<char*>(&other->_impl_.value_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[15]);
}

// ===================================================================

class TypeProto_Optional::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Optional>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Optional, _impl_._has_bits_);
  static const ::onnx::TypeProto& elem_type(const TypeProto_Optional* msg);
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto&
TypeProto_Optional::_Internal::elem_type(const TypeProto_Optional* msg) {
  return *msg->_impl_.elem_type_;
}
TypeProto_Optional::TypeProto_Optional(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Optional)
}
TypeProto_Optional::TypeProto_Optional(const TypeProto_Optional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto_Optional* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elem_type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_elem_type()) {
    _this->_impl_.elem_type_ = new ::onnx::TypeProto(*from._impl_.elem_type_);
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Optional)
}

inline void TypeProto_Optional::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elem_type_){nullptr}
  };
}

TypeProto_Optional::~TypeProto_Optional() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Optional)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto_Optional::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.elem_type_;
}

void TypeProto_Optional::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto_Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Optional)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.elem_type_ != nullptr);
    _impl_.elem_type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto_Optional::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .onnx.TypeProto elem_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_elem_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto_Optional::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Optional)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .onnx.TypeProto elem_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::elem_type(this),
        _Internal::elem_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Optional)
  return target;
}

size_t TypeProto_Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Optional)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .onnx.TypeProto elem_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.elem_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto_Optional::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto_Optional::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto_Optional::GetClassData() const { return &_class_data_; }


void TypeProto_Optional::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto_Optional*>(&to_msg);
  auto& from = static_cast<const TypeProto_Optional&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Optional)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_elem_type()) {
    _this->_internal_mutable_elem_type()->::onnx::TypeProto::MergeFrom(
        from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto_Optional::CopyFrom(const TypeProto_Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto_Optional::IsInitialized() const {
  return true;
}

void TypeProto_Optional::InternalSwap(TypeProto_Optional* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.elem_type_, other->_impl_.elem_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_Optional::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[16]);
}

// ===================================================================

class TypeProto_SparseTensor::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_SparseTensor>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_._has_bits_);
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::TensorShapeProto& shape(const TypeProto_SparseTensor* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TensorShapeProto&
TypeProto_SparseTensor::_Internal::shape(const TypeProto_SparseTensor* msg) {
  return *msg->_impl_.shape_;
}
TypeProto_SparseTensor::TypeProto_SparseTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.SparseTensor)
}
TypeProto_SparseTensor::TypeProto_SparseTensor(const TypeProto_SparseTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto_SparseTensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.elem_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::onnx::TensorShapeProto(*from._impl_.shape_);
  }
  _this->_impl_.elem_type_ = from._impl_.elem_type_;
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.SparseTensor)
}

inline void TypeProto_SparseTensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.elem_type_){0}
  };
}

TypeProto_SparseTensor::~TypeProto_SparseTensor() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.SparseTensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto_SparseTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void TypeProto_SparseTensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto_SparseTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.SparseTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  _impl_.elem_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto_SparseTensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 elem_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_elem_type(&has_bits);
          _impl_.elem_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto_SparseTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.SparseTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 elem_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_elem_type(), target);
  }

  // optional .onnx.TensorShapeProto shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.SparseTensor)
  return target;
}

size_t TypeProto_SparseTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.SparseTensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .onnx.TensorShapeProto shape = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shape_);
    }

    // optional int32 elem_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto_SparseTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto_SparseTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto_SparseTensor::GetClassData() const { return &_class_data_; }


void TypeProto_SparseTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto_SparseTensor*>(&to_msg);
  auto& from = static_cast<const TypeProto_SparseTensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.SparseTensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_shape()->::onnx::TensorShapeProto::MergeFrom(
          from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.elem_type_ = from._impl_.elem_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto_SparseTensor::CopyFrom(const TypeProto_SparseTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.SparseTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto_SparseTensor::IsInitialized() const {
  return true;
}

void TypeProto_SparseTensor::InternalSwap(TypeProto_SparseTensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.elem_type_)
      + sizeof(TypeProto_SparseTensor::_impl_.elem_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_SparseTensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[17]);
}

// ===================================================================

class TypeProto_Opaque::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Opaque>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Opaque, _impl_._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TypeProto_Opaque::TypeProto_Opaque(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Opaque)
}
TypeProto_Opaque::TypeProto_Opaque(const TypeProto_Opaque& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto_Opaque* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Opaque)
}

inline void TypeProto_Opaque::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.name_){}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypeProto_Opaque::~TypeProto_Opaque() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Opaque)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto_Opaque::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.domain_.Destroy();
  _impl_.name_.Destroy();
}

void TypeProto_Opaque::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto_Opaque::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Opaque)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto_Opaque::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TypeProto.Opaque.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TypeProto.Opaque.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto_Opaque::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Opaque)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TypeProto.Opaque.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TypeProto.Opaque.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Opaque)
  return target;
}

size_t TypeProto_Opaque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Opaque)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto_Opaque::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto_Opaque::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto_Opaque::GetClassData() const { return &_class_data_; }


void TypeProto_Opaque::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto_Opaque*>(&to_msg);
  auto& from = static_cast<const TypeProto_Opaque&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Opaque)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto_Opaque::CopyFrom(const TypeProto_Opaque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Opaque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto_Opaque::IsInitialized() const {
  return true;
}

void TypeProto_Opaque::InternalSwap(TypeProto_Opaque* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto_Opaque::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[18]);
}

// ===================================================================

class TypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto, _impl_._has_bits_);
  static constexpr int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _impl_._oneof_case_);
  static const ::onnx::TypeProto_Tensor& tensor_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Sequence& sequence_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Map& map_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Optional& optional_type(const TypeProto* msg);
  static const ::onnx::TypeProto_SparseTensor& sparse_tensor_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Opaque& opaque_type(const TypeProto* msg);
  static void set_has_denotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto_Tensor&
TypeProto::_Internal::tensor_type(const TypeProto* msg) {
  return *msg->_impl_.value_.tensor_type_;
}
const ::onnx::TypeProto_Sequence&
TypeProto::_Internal::sequence_type(const TypeProto* msg) {
  return *msg->_impl_.value_.sequence_type_;
}
const ::onnx::TypeProto_Map&
TypeProto::_Internal::map_type(const TypeProto* msg) {
  return *msg->_impl_.value_.map_type_;
}
const ::onnx::TypeProto_Optional&
TypeProto::_Internal::optional_type(const TypeProto* msg) {
  return *msg->_impl_.value_.optional_type_;
}
const ::onnx::TypeProto_SparseTensor&
TypeProto::_Internal::sparse_tensor_type(const TypeProto* msg) {
  return *msg->_impl_.value_.sparse_tensor_type_;
}
const ::onnx::TypeProto_Opaque&
TypeProto::_Internal::opaque_type(const TypeProto* msg) {
  return *msg->_impl_.value_.opaque_type_;
}
void TypeProto::set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (tensor_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tensor_type);
    if (message_arena != submessage_arena) {
      tensor_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_type, submessage_arena);
    }
    set_has_tensor_type();
    _impl_.value_.tensor_type_ = tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.tensor_type)
}
void TypeProto::set_allocated_sequence_type(::onnx::TypeProto_Sequence* sequence_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sequence_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sequence_type);
    if (message_arena != submessage_arena) {
      sequence_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence_type, submessage_arena);
    }
    set_has_sequence_type();
    _impl_.value_.sequence_type_ = sequence_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sequence_type)
}
void TypeProto::set_allocated_map_type(::onnx::TypeProto_Map* map_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (map_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_type);
    if (message_arena != submessage_arena) {
      map_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_type, submessage_arena);
    }
    set_has_map_type();
    _impl_.value_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.map_type)
}
void TypeProto::set_allocated_optional_type(::onnx::TypeProto_Optional* optional_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (optional_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_type);
    if (message_arena != submessage_arena) {
      optional_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_type, submessage_arena);
    }
    set_has_optional_type();
    _impl_.value_.optional_type_ = optional_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.optional_type)
}
void TypeProto::set_allocated_sparse_tensor_type(::onnx::TypeProto_SparseTensor* sparse_tensor_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sparse_tensor_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sparse_tensor_type);
    if (message_arena != submessage_arena) {
      sparse_tensor_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse_tensor_type, submessage_arena);
    }
    set_has_sparse_tensor_type();
    _impl_.value_.sparse_tensor_type_ = sparse_tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sparse_tensor_type)
}
void TypeProto::set_allocated_opaque_type(::onnx::TypeProto_Opaque* opaque_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (opaque_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(opaque_type);
    if (message_arena != submessage_arena) {
      opaque_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opaque_type, submessage_arena);
    }
    set_has_opaque_type();
    _impl_.value_.opaque_type_ = opaque_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.opaque_type)
}
TypeProto::TypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto)
}
TypeProto::TypeProto(const TypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denotation_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.denotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_denotation()) {
    _this->_impl_.denotation_.Set(from._internal_denotation(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kTensorType: {
      _this->_internal_mutable_tensor_type()->::onnx::TypeProto_Tensor::MergeFrom(
          from._internal_tensor_type());
      break;
    }
    case kSequenceType: {
      _this->_internal_mutable_sequence_type()->::onnx::TypeProto_Sequence::MergeFrom(
          from._internal_sequence_type());
      break;
    }
    case kMapType: {
      _this->_internal_mutable_map_type()->::onnx::TypeProto_Map::MergeFrom(
          from._internal_map_type());
      break;
    }
    case kOptionalType: {
      _this->_internal_mutable_optional_type()->::onnx::TypeProto_Optional::MergeFrom(
          from._internal_optional_type());
      break;
    }
    case kSparseTensorType: {
      _this->_internal_mutable_sparse_tensor_type()->::onnx::TypeProto_SparseTensor::MergeFrom(
          from._internal_sparse_tensor_type());
      break;
    }
    case kOpaqueType: {
      _this->_internal_mutable_opaque_type()->::onnx::TypeProto_Opaque::MergeFrom(
          from._internal_opaque_type());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto)
}

inline void TypeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denotation_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.denotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.denotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

TypeProto::~TypeProto() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denotation_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void TypeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TypeProto)
  switch (value_case()) {
    case kTensorType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.tensor_type_;
      }
      break;
    }
    case kSequenceType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sequence_type_;
      }
      break;
    }
    case kMapType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.map_type_;
      }
      break;
    }
    case kOptionalType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.optional_type_;
      }
      break;
    }
    case kSparseTensorType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sparse_tensor_type_;
      }
      break;
    }
    case kOpaqueType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.opaque_type_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.denotation_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onnx.TypeProto.Tensor tensor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onnx.TypeProto.Sequence sequence_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onnx.TypeProto.Map map_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string denotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_denotation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.TypeProto.denotation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .onnx.TypeProto.Opaque opaque_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_opaque_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sparse_tensor_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onnx.TypeProto.Optional optional_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kTensorType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::tensor_type(this),
          _Internal::tensor_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kSequenceType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::sequence_type(this),
          _Internal::sequence_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kMapType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::map_type(this),
          _Internal::map_type(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string denotation = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_denotation().data(), static_cast<int>(this->_internal_denotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.TypeProto.denotation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_denotation(), target);
  }

  switch (value_case()) {
    case kOpaqueType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::opaque_type(this),
          _Internal::opaque_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kSparseTensorType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::sparse_tensor_type(this),
          _Internal::sparse_tensor_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kOptionalType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::optional_type(this),
          _Internal::optional_type(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto)
  return target;
}

size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string denotation = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denotation());
  }

  switch (value_case()) {
    // .onnx.TypeProto.Tensor tensor_type = 1;
    case kTensorType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.tensor_type_);
      break;
    }
    // .onnx.TypeProto.Sequence sequence_type = 4;
    case kSequenceType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sequence_type_);
      break;
    }
    // .onnx.TypeProto.Map map_type = 5;
    case kMapType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.map_type_);
      break;
    }
    // .onnx.TypeProto.Optional optional_type = 9;
    case kOptionalType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.optional_type_);
      break;
    }
    // .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
    case kSparseTensorType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sparse_tensor_type_);
      break;
    }
    // .onnx.TypeProto.Opaque opaque_type = 7;
    case kOpaqueType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.opaque_type_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto::GetClassData() const { return &_class_data_; }


void TypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeProto*>(&to_msg);
  auto& from = static_cast<const TypeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_denotation()) {
    _this->_internal_set_denotation(from._internal_denotation());
  }
  switch (from.value_case()) {
    case kTensorType: {
      _this->_internal_mutable_tensor_type()->::onnx::TypeProto_Tensor::MergeFrom(
          from._internal_tensor_type());
      break;
    }
    case kSequenceType: {
      _this->_internal_mutable_sequence_type()->::onnx::TypeProto_Sequence::MergeFrom(
          from._internal_sequence_type());
      break;
    }
    case kMapType: {
      _this->_internal_mutable_map_type()->::onnx::TypeProto_Map::MergeFrom(
          from._internal_map_type());
      break;
    }
    case kOptionalType: {
      _this->_internal_mutable_optional_type()->::onnx::TypeProto_Optional::MergeFrom(
          from._internal_optional_type());
      break;
    }
    case kSparseTensorType: {
      _this->_internal_mutable_sparse_tensor_type()->::onnx::TypeProto_SparseTensor::MergeFrom(
          from._internal_sparse_tensor_type());
      break;
    }
    case kOpaqueType: {
      _this->_internal_mutable_opaque_type()->::onnx::TypeProto_Opaque::MergeFrom(
          from._internal_opaque_type());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto::IsInitialized() const {
  return true;
}

void TypeProto::InternalSwap(TypeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.denotation_, lhs_arena,
      &other->_impl_.denotation_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[19]);
}

// ===================================================================

class OperatorSetIdProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatorSetIdProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OperatorSetIdProto, _impl_._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperatorSetIdProto::OperatorSetIdProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.OperatorSetIdProto)
}
OperatorSetIdProto::OperatorSetIdProto(const OperatorSetIdProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatorSetIdProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:onnx.OperatorSetIdProto)
}

inline void OperatorSetIdProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.version_){int64_t{0}}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperatorSetIdProto::~OperatorSetIdProto() {
  // @@protoc_insertion_point(destructor:onnx.OperatorSetIdProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatorSetIdProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.domain_.Destroy();
}

void OperatorSetIdProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatorSetIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OperatorSetIdProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.domain_.ClearNonDefaultToEmpty();
  }
  _impl_.version_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorSetIdProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorSetIdProto.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatorSetIdProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OperatorSetIdProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorSetIdProto.domain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // optional int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OperatorSetIdProto)
  return target;
}

size_t OperatorSetIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OperatorSetIdProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional int64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorSetIdProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatorSetIdProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorSetIdProto::GetClassData() const { return &_class_data_; }


void OperatorSetIdProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatorSetIdProto*>(&to_msg);
  auto& from = static_cast<const OperatorSetIdProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.OperatorSetIdProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorSetIdProto::CopyFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OperatorSetIdProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorSetIdProto::IsInitialized() const {
  return true;
}

void OperatorSetIdProto::InternalSwap(OperatorSetIdProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorSetIdProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[20]);
}

// ===================================================================

class FunctionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FunctionProto::FunctionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.FunctionProto)
}
FunctionProto::FunctionProto(const FunctionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_){from._impl_.input_}
    , decltype(_impl_.output_){from._impl_.output_}
    , decltype(_impl_.attribute_){from._impl_.attribute_}
    , decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.opset_import_){from._impl_.opset_import_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.domain_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onnx.FunctionProto)
}

inline void FunctionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_){arena}
    , decltype(_impl_.output_){arena}
    , decltype(_impl_.attribute_){arena}
    , decltype(_impl_.node_){arena}
    , decltype(_impl_.opset_import_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.domain_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionProto::~FunctionProto() {
  // @@protoc_insertion_point(destructor:onnx.FunctionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_.~RepeatedPtrField();
  _impl_.output_.~RepeatedPtrField();
  _impl_.attribute_.~RepeatedPtrField();
  _impl_.node_.~RepeatedPtrField();
  _impl_.opset_import_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.domain_.Destroy();
}

void FunctionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.FunctionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.Clear();
  _impl_.output_.Clear();
  _impl_.attribute_.Clear();
  _impl_.node_.Clear();
  _impl_.opset_import_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.FunctionProto.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "onnx.FunctionProto.input");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "onnx.FunctionProto.output");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string attribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attribute();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "onnx.FunctionProto.attribute");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.NodeProto node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.FunctionProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.OperatorSetIdProto opset_import = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opset_import(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.FunctionProto.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.FunctionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.FunctionProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string input = 4;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.FunctionProto.input");
    target = stream->WriteString(4, s, target);
  }

  // repeated string output = 5;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.FunctionProto.output");
    target = stream->WriteString(5, s, target);
  }

  // repeated string attribute = 6;
  for (int i = 0, n = this->_internal_attribute_size(); i < n; i++) {
    const auto& s = this->_internal_attribute(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.FunctionProto.attribute");
    target = stream->WriteString(6, s, target);
  }

  // repeated .onnx.NodeProto node = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string doc_string = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.FunctionProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_doc_string(), target);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opset_import_size()); i < n; i++) {
    const auto& repfield = this->_internal_opset_import(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string domain = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.FunctionProto.domain");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.FunctionProto)
  return target;
}

size_t FunctionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.FunctionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_.size());
  for (int i = 0, n = _impl_.input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_.Get(i));
  }

  // repeated string output = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_.size());
  for (int i = 0, n = _impl_.output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_.Get(i));
  }

  // repeated string attribute = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attribute_.size());
  for (int i = 0, n = _impl_.attribute_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attribute_.Get(i));
  }

  // repeated .onnx.NodeProto node = 7;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  total_size += 1UL * this->_internal_opset_import_size();
  for (const auto& msg : this->_impl_.opset_import_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string doc_string = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional string domain = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionProto::GetClassData() const { return &_class_data_; }


void FunctionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionProto*>(&to_msg);
  auto& from = static_cast<const FunctionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.FunctionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_.MergeFrom(from._impl_.input_);
  _this->_impl_.output_.MergeFrom(from._impl_.output_);
  _this->_impl_.attribute_.MergeFrom(from._impl_.attribute_);
  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.opset_import_.MergeFrom(from._impl_.opset_import_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_domain(from._internal_domain());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionProto::CopyFrom(const FunctionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.FunctionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionProto::IsInitialized() const {
  return true;
}

void FunctionProto::InternalSwap(FunctionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.output_.InternalSwap(&other->_impl_.output_);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.opset_import_.InternalSwap(&other->_impl_.opset_import_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2dml_2eproto_getter, &descriptor_table_onnx_2dml_2eproto_once,
      file_level_metadata_onnx_2dml_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onnx::AttributeProto*
Arena::CreateMaybeMessage< ::onnx::AttributeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::AttributeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::ValueInfoProto*
Arena::CreateMaybeMessage< ::onnx::ValueInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::ValueInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::NodeProto*
Arena::CreateMaybeMessage< ::onnx::NodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::NodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TrainingInfoProto*
Arena::CreateMaybeMessage< ::onnx::TrainingInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TrainingInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::ModelProto*
Arena::CreateMaybeMessage< ::onnx::ModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::ModelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::StringStringEntryProto*
Arena::CreateMaybeMessage< ::onnx::StringStringEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::StringStringEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TensorAnnotation*
Arena::CreateMaybeMessage< ::onnx::TensorAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TensorAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::GraphProto*
Arena::CreateMaybeMessage< ::onnx::GraphProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::GraphProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TensorProto_Segment*
Arena::CreateMaybeMessage< ::onnx::TensorProto_Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TensorProto_Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TensorProto*
Arena::CreateMaybeMessage< ::onnx::TensorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::SparseTensorProto*
Arena::CreateMaybeMessage< ::onnx::SparseTensorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::SparseTensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TensorShapeProto_Dimension*
Arena::CreateMaybeMessage< ::onnx::TensorShapeProto_Dimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TensorShapeProto_Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TensorShapeProto*
Arena::CreateMaybeMessage< ::onnx::TensorShapeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TensorShapeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto_Tensor*
Arena::CreateMaybeMessage< ::onnx::TypeProto_Tensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto_Tensor >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto_Sequence*
Arena::CreateMaybeMessage< ::onnx::TypeProto_Sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto_Sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto_Map*
Arena::CreateMaybeMessage< ::onnx::TypeProto_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto_Optional*
Arena::CreateMaybeMessage< ::onnx::TypeProto_Optional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto_Optional >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto_SparseTensor*
Arena::CreateMaybeMessage< ::onnx::TypeProto_SparseTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto_SparseTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto_Opaque*
Arena::CreateMaybeMessage< ::onnx::TypeProto_Opaque >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto_Opaque >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::TypeProto*
Arena::CreateMaybeMessage< ::onnx::TypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::TypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::OperatorSetIdProto*
Arena::CreateMaybeMessage< ::onnx::OperatorSetIdProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::OperatorSetIdProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::FunctionProto*
Arena::CreateMaybeMessage< ::onnx::FunctionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::FunctionProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
