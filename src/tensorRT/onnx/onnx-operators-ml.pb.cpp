// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx-operators-ml.proto

#include "onnx-operators-ml.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace onnx {
PROTOBUF_CONSTEXPR OperatorProto::OperatorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.op_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.since_version_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0} {}
struct OperatorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorProtoDefaultTypeInternal() {}
  union {
    OperatorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorProtoDefaultTypeInternal _OperatorProto_default_instance_;
PROTOBUF_CONSTEXPR OperatorSetProto::OperatorSetProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operator__)*/{}
  , /*decltype(_impl_.functions_)*/{}
  , /*decltype(_impl_.magic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ir_version_prerelease_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ir_build_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ir_version_)*/int64_t{0}
  , /*decltype(_impl_.opset_version_)*/int64_t{0}} {}
struct OperatorSetProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorSetProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorSetProtoDefaultTypeInternal() {}
  union {
    OperatorSetProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorSetProtoDefaultTypeInternal _OperatorSetProto_default_instance_;
}  // namespace onnx
static ::_pb::Metadata file_level_metadata_onnx_2doperators_2dml_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_onnx_2doperators_2dml_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_onnx_2doperators_2dml_2eproto = nullptr;

const uint32_t TableStruct_onnx_2doperators_2dml_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorProto, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorProto, _impl_.since_version_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorProto, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorProto, _impl_.doc_string_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _split_
  ~0u,  // no sizeof(Split)
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.magic_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.ir_version_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.ir_version_prerelease_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.ir_build_metadata_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.opset_version_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.doc_string_),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::onnx::OperatorSetProto, _impl_.functions_),
  0,
  5,
  1,
  4,
  2,
  6,
  3,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::onnx::OperatorProto)},
  { 16, 33, -1, sizeof(::onnx::OperatorSetProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::onnx::_OperatorProto_default_instance_._instance,
  &::onnx::_OperatorSetProto_default_instance_._instance,
};

const char descriptor_table_protodef_onnx_2doperators_2dml_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027onnx-operators-ml.proto\022\004onnx\032\ronnx-ml"
  ".proto\"q\n\rOperatorProto\022\017\n\007op_type\030\001 \001(\t"
  "\022\025\n\rsince_version\030\002 \001(\003\022$\n\006status\030\003 \001(\0162"
  "\024.onnx.OperatorStatus\022\022\n\ndoc_string\030\n \001("
  "\t\"\371\001\n\020OperatorSetProto\022\r\n\005magic\030\001 \001(\t\022\022\n"
  "\nir_version\030\002 \001(\003\022\035\n\025ir_version_prerelea"
  "se\030\003 \001(\t\022\031\n\021ir_build_metadata\030\007 \001(\t\022\016\n\006d"
  "omain\030\004 \001(\t\022\025\n\ropset_version\030\005 \001(\003\022\022\n\ndo"
  "c_string\030\006 \001(\t\022%\n\010operator\030\010 \003(\0132\023.onnx."
  "OperatorProto\022&\n\tfunctions\030\t \003(\0132\023.onnx."
  "FunctionProto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_onnx_2doperators_2dml_2eproto_deps[1] = {
  &::descriptor_table_onnx_2dml_2eproto,
};
static ::_pbi::once_flag descriptor_table_onnx_2doperators_2dml_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_onnx_2doperators_2dml_2eproto = {
    false, false, 413, descriptor_table_protodef_onnx_2doperators_2dml_2eproto,
    "onnx-operators-ml.proto",
    &descriptor_table_onnx_2doperators_2dml_2eproto_once, descriptor_table_onnx_2doperators_2dml_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_onnx_2doperators_2dml_2eproto::offsets,
    file_level_metadata_onnx_2doperators_2dml_2eproto, file_level_enum_descriptors_onnx_2doperators_2dml_2eproto,
    file_level_service_descriptors_onnx_2doperators_2dml_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_onnx_2doperators_2dml_2eproto_getter() {
  return &descriptor_table_onnx_2doperators_2dml_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_onnx_2doperators_2dml_2eproto(&descriptor_table_onnx_2doperators_2dml_2eproto);
namespace onnx {

// ===================================================================

class OperatorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatorProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OperatorProto, _impl_._has_bits_);
  static void set_has_op_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_since_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperatorProto::OperatorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.OperatorProto)
}
OperatorProto::OperatorProto(const OperatorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.since_version_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_op_type()) {
    _this->_impl_.op_type_.Set(from._internal_op_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.since_version_, &from._impl_.since_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.since_version_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:onnx.OperatorProto)
}

inline void OperatorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.since_version_){int64_t{0}}
    , decltype(_impl_.status_){0}
  };
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperatorProto::~OperatorProto() {
  // @@protoc_insertion_point(destructor:onnx.OperatorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.op_type_.Destroy();
  _impl_.doc_string_.Destroy();
}

void OperatorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OperatorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.op_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.since_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.since_version_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorProto.op_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 since_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_since_version(&has_bits);
          _impl_.since_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.OperatorStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::onnx::OperatorStatus_IsValid(val))) {
            _internal_set_status(static_cast<::onnx::OperatorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OperatorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string op_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorProto.op_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_type(), target);
  }

  // optional int64 since_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_since_version(), target);
  }

  // optional .onnx.OperatorStatus status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional string doc_string = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_doc_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OperatorProto)
  return target;
}

size_t OperatorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OperatorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string op_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_op_type());
    }

    // optional string doc_string = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional int64 since_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_since_version());
    }

    // optional .onnx.OperatorStatus status = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorProto::GetClassData() const { return &_class_data_; }


void OperatorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatorProto*>(&to_msg);
  auto& from = static_cast<const OperatorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.OperatorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_op_type(from._internal_op_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.since_version_ = from._impl_.since_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorProto::CopyFrom(const OperatorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OperatorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorProto::IsInitialized() const {
  return true;
}

void OperatorProto::InternalSwap(OperatorProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_type_, lhs_arena,
      &other->_impl_.op_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatorProto, _impl_.status_)
      + sizeof(OperatorProto::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(OperatorProto, _impl_.since_version_)>(
          reinterpret_cast<char*>(&_impl_.since_version_),
          reinterpret_cast<char*>(&other->_impl_.since_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2doperators_2dml_2eproto_getter, &descriptor_table_onnx_2doperators_2dml_2eproto_once,
      file_level_metadata_onnx_2doperators_2dml_2eproto[0]);
}

// ===================================================================

class OperatorSetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatorSetProto>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OperatorSetProto, _impl_._has_bits_);
  static void set_has_magic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ir_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ir_version_prerelease(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ir_build_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opset_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_doc_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void OperatorSetProto::clear_functions() {
  _impl_.functions_.Clear();
}
OperatorSetProto::OperatorSetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:onnx.OperatorSetProto)
}
OperatorSetProto::OperatorSetProto(const OperatorSetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatorSetProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operator__){from._impl_.operator__}
    , decltype(_impl_.functions_){from._impl_.functions_}
    , decltype(_impl_.magic_){}
    , decltype(_impl_.ir_version_prerelease_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.ir_build_metadata_){}
    , decltype(_impl_.ir_version_){}
    , decltype(_impl_.opset_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.magic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_magic()) {
    _this->_impl_.magic_.Set(from._internal_magic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ir_version_prerelease_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_version_prerelease_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ir_version_prerelease()) {
    _this->_impl_.ir_version_prerelease_.Set(from._internal_ir_version_prerelease(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_doc_string()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ir_build_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_build_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ir_build_metadata()) {
    _this->_impl_.ir_build_metadata_.Set(from._internal_ir_build_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ir_version_, &from._impl_.ir_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opset_version_) -
    reinterpret_cast<char*>(&_impl_.ir_version_)) + sizeof(_impl_.opset_version_));
  // @@protoc_insertion_point(copy_constructor:onnx.OperatorSetProto)
}

inline void OperatorSetProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operator__){arena}
    , decltype(_impl_.functions_){arena}
    , decltype(_impl_.magic_){}
    , decltype(_impl_.ir_version_prerelease_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.ir_build_metadata_){}
    , decltype(_impl_.ir_version_){int64_t{0}}
    , decltype(_impl_.opset_version_){int64_t{0}}
  };
  _impl_.magic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ir_version_prerelease_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_version_prerelease_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ir_build_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_build_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperatorSetProto::~OperatorSetProto() {
  // @@protoc_insertion_point(destructor:onnx.OperatorSetProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatorSetProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operator__.~RepeatedPtrField();
  _impl_.functions_.~RepeatedPtrField();
  _impl_.magic_.Destroy();
  _impl_.ir_version_prerelease_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.ir_build_metadata_.Destroy();
}

void OperatorSetProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatorSetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OperatorSetProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operator__.Clear();
  _impl_.functions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.magic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ir_version_prerelease_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.doc_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ir_build_metadata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.ir_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.opset_version_) -
        reinterpret_cast<char*>(&_impl_.ir_version_)) + sizeof(_impl_.opset_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorSetProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_magic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorSetProto.magic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 ir_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ir_version(&has_bits);
          _impl_.ir_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ir_version_prerelease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ir_version_prerelease();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorSetProto.ir_version_prerelease");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorSetProto.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 opset_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_opset_version(&has_bits);
          _impl_.opset_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string doc_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorSetProto.doc_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ir_build_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ir_build_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "onnx.OperatorSetProto.ir_build_metadata");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.OperatorProto operator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operator_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.FunctionProto functions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatorSetProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OperatorSetProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string magic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_magic().data(), static_cast<int>(this->_internal_magic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorSetProto.magic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_magic(), target);
  }

  // optional int64 ir_version = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ir_version(), target);
  }

  // optional string ir_version_prerelease = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ir_version_prerelease().data(), static_cast<int>(this->_internal_ir_version_prerelease().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorSetProto.ir_version_prerelease");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ir_version_prerelease(), target);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorSetProto.domain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_domain(), target);
  }

  // optional int64 opset_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_opset_version(), target);
  }

  // optional string doc_string = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorSetProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_doc_string(), target);
  }

  // optional string ir_build_metadata = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ir_build_metadata().data(), static_cast<int>(this->_internal_ir_build_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OperatorSetProto.ir_build_metadata");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ir_build_metadata(), target);
  }

  // repeated .onnx.OperatorProto operator = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operator__size()); i < n; i++) {
    const auto& repfield = this->_internal_operator_(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.FunctionProto functions = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_functions_size()); i < n; i++) {
    const auto& repfield = this->_internal_functions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OperatorSetProto)
  return target;
}

size_t OperatorSetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OperatorSetProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.OperatorProto operator = 8;
  total_size += 1UL * this->_internal_operator__size();
  for (const auto& msg : this->_impl_.operator__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.FunctionProto functions = 9;
  total_size += 1UL * this->_internal_functions_size();
  for (const auto& msg : this->_impl_.functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string magic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_magic());
    }

    // optional string ir_version_prerelease = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ir_version_prerelease());
    }

    // optional string domain = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string doc_string = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_doc_string());
    }

    // optional string ir_build_metadata = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ir_build_metadata());
    }

    // optional int64 ir_version = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ir_version());
    }

    // optional int64 opset_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_opset_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorSetProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatorSetProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorSetProto::GetClassData() const { return &_class_data_; }


void OperatorSetProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatorSetProto*>(&to_msg);
  auto& from = static_cast<const OperatorSetProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.OperatorSetProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operator__.MergeFrom(from._impl_.operator__);
  _this->_impl_.functions_.MergeFrom(from._impl_.functions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_magic(from._internal_magic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ir_version_prerelease(from._internal_ir_version_prerelease());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_doc_string(from._internal_doc_string());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_ir_build_metadata(from._internal_ir_build_metadata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ir_version_ = from._impl_.ir_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.opset_version_ = from._impl_.opset_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorSetProto::CopyFrom(const OperatorSetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OperatorSetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorSetProto::IsInitialized() const {
  return true;
}

void OperatorSetProto::InternalSwap(OperatorSetProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.operator__.InternalSwap(&other->_impl_.operator__);
  _impl_.functions_.InternalSwap(&other->_impl_.functions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.magic_, lhs_arena,
      &other->_impl_.magic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ir_version_prerelease_, lhs_arena,
      &other->_impl_.ir_version_prerelease_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ir_build_metadata_, lhs_arena,
      &other->_impl_.ir_build_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatorSetProto, _impl_.opset_version_)
      + sizeof(OperatorSetProto::_impl_.opset_version_)
      - PROTOBUF_FIELD_OFFSET(OperatorSetProto, _impl_.ir_version_)>(
          reinterpret_cast<char*>(&_impl_.ir_version_),
          reinterpret_cast<char*>(&other->_impl_.ir_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorSetProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_onnx_2doperators_2dml_2eproto_getter, &descriptor_table_onnx_2doperators_2dml_2eproto_once,
      file_level_metadata_onnx_2doperators_2dml_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onnx::OperatorProto*
Arena::CreateMaybeMessage< ::onnx::OperatorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::OperatorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::OperatorSetProto*
Arena::CreateMaybeMessage< ::onnx::OperatorSetProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::OperatorSetProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
